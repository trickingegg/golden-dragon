package com.tradingbot.tinkoff.strategy;

import com.tradingbot.tinkoff.model.TradingSignal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.ta4j.core.BarSeries;
import org.ta4j.core.indicators.ATRIndicator;
import org.ta4j.core.indicators.averages.EMAIndicator;
import org.ta4j.core.indicators.helpers.ClosePriceIndicator;
import org.ta4j.core.indicators.volume.VWAPIndicator;
import org.ta4j.core.num.Num;
import org.ta4j.core.num.DecimalNum;

// –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è SDK v1.32
import ru.tinkoff.piapi.contract.v1.OrderBook;
import ru.tinkoff.piapi.contract.v1.Order;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.ZonedDateTime;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * VWAP –∏ EMA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Tinkoff SDK v1.32
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã TA4J –∏ –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö API
 */
public class VWAPEMAStrategy {
    private static final Logger logger = LoggerFactory.getLogger(VWAPEMAStrategy.class);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    private static final int FAST_EMA_PERIOD = 9;
    private static final int SLOW_EMA_PERIOD = 21;
    private static final int ATR_PERIOD = 14;
    private static final int VWAP_PERIOD = 20;
    private static final int MIN_SIGNAL_SCORE = 70;

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã TA4J
    private final BarSeries barSeries;
    private final ClosePriceIndicator closePrice;
    private final VWAPIndicator vwap;
    private final EMAIndicator fastEMA;
    private final EMAIndicator slowEMA;
    private final ATRIndicator atr;

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    private final AtomicInteger signalCounter = new AtomicInteger(0);
    private volatile OrderBook lastOrderBook; // –ù–æ–≤—ã–π —Ç–∏–ø –∏–∑ SDK v1.32

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    public VWAPEMAStrategy(BarSeries barSeries) {
        this.barSeries = barSeries;
        this.closePrice = new ClosePriceIndicator(barSeries);
        this.vwap = new VWAPIndicator(barSeries, VWAP_PERIOD);
        this.fastEMA = new EMAIndicator(closePrice, FAST_EMA_PERIOD);
        this.slowEMA = new EMAIndicator(closePrice, SLOW_EMA_PERIOD);
        this.atr = new ATRIndicator(barSeries, ATR_PERIOD);

        logger.info("‚úÖ VWAPEMAStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: FastEMA={}, SlowEMA={}, ATR={}, VWAP={}",
                FAST_EMA_PERIOD, SLOW_EMA_PERIOD, ATR_PERIOD, VWAP_PERIOD);
    }

    /**
     * –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    public int getUnstablePeriod() {
        return Math.max(SLOW_EMA_PERIOD, VWAP_PERIOD) + 2;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç SDK v1.32)
     */
    public void updateOrderBook(OrderBook orderBook) {
        if (orderBook != null) {
            this.lastOrderBook = orderBook;
            logger.debug("üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–∫–∞–Ω –¥–ª—è {}: bids={}, asks={}",
                    orderBook.getFigi(),
                    orderBook.getBidsCount(),
                    orderBook.getAsksCount());
        }
    }

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    public TradingSignal analyzeSignal(com.tradingbot.tinkoff.model.TradableInstrument instrument) {
        int lastIndex = barSeries.getEndIndex();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (lastIndex < getUnstablePeriod()) {
            logger.debug("‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {}",
                    lastIndex, getUnstablePeriod());
            return new TradingSignal(TradingSignal.SignalType.HOLD, 0,
                    "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö... (" + (lastIndex + 1) + "/" + getUnstablePeriod() + ")");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        Num currentPrice = closePrice.getValue(lastIndex);
        Num currentVWAP = vwap.getValue(lastIndex);
        Num currentFastEMA = fastEMA.getValue(lastIndex);
        Num currentSlowEMA = slowEMA.getValue(lastIndex);
        Num prevFastEMA = fastEMA.getValue(lastIndex - 1);
        Num prevSlowEMA = slowEMA.getValue(lastIndex - 1);
        Num currentATR = atr.getValue(lastIndex);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VWAP
        TrendDirection trendDirection = currentPrice.isGreaterThan(currentVWAP) ?
                TrendDirection.BULLISH : TrendDirection.BEARISH;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA
        boolean emaCrossoverBullish = prevFastEMA.isLessThanOrEqual(prevSlowEMA) &&
                currentFastEMA.isGreaterThan(currentSlowEMA);
        boolean emaCrossoverBearish = prevFastEMA.isGreaterThanOrEqual(prevSlowEMA) &&
                currentFastEMA.isLessThan(currentSlowEMA);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª —Å–∏–≥–Ω–∞–ª–∞
        int signalScore = calculateSignalScore(trendDirection, emaCrossoverBullish, emaCrossoverBearish,
                currentPrice, currentVWAP, currentATR);

        logger.debug("üìà –ê–Ω–∞–ª–∏–∑: Price={}, VWAP={}, Trend={}, Score={}",
                currentPrice.doubleValue(), currentVWAP.doubleValue(), trendDirection, signalScore);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –±–∞–ª–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫
        if (signalScore >= MIN_SIGNAL_SCORE) {
            TradingSignal.SignalType signalType = TradingSignal.SignalType.HOLD;

            if (trendDirection == TrendDirection.BULLISH && emaCrossoverBullish) {
                signalType = TradingSignal.SignalType.BUY;
            } else if (trendDirection == TrendDirection.BEARISH && emaCrossoverBearish) {
                signalType = TradingSignal.SignalType.SELL;
            }

            if (signalType == TradingSignal.SignalType.HOLD) {
                return new TradingSignal(TradingSignal.SignalType.HOLD, signalScore,
                        "–í—ã—Å–æ–∫–∏–π –±–∞–ª–ª, –Ω–æ –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞");
            }

            // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            return createTradingSignal(signalType, signalScore, trendDirection,
                    currentPrice, currentATR, instrument);
        }

        return new TradingSignal(TradingSignal.SignalType.HOLD, signalScore,
                "–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (–±–∞–ª–ª < " + MIN_SIGNAL_SCORE + ")");
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω–µ–π
     */
    private TradingSignal createTradingSignal(TradingSignal.SignalType signalType,
                                              int signalScore,
                                              TrendDirection trendDirection,
                                              Num currentPrice,
                                              Num currentATR,
                                              com.tradingbot.tinkoff.model.TradableInstrument instrument) {

        String description = String.format("%s —Å–∏–≥–Ω–∞–ª - %s —Ç—Ä–µ–Ω–¥ –ø–æ VWAP. –ë–∞–ª–ª: %d",
                signalType, trendDirection, signalScore);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BigDecimal –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        BigDecimal entryPrice = ((DecimalNum) currentPrice).getDelegate();
        BigDecimal atrValue = ((DecimalNum) currentATR).getDelegate();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        BigDecimal stopLoss = calculateStopLoss(entryPrice, atrValue, signalType);
        BigDecimal takeProfit = calculateTakeProfit(entryPrice, stopLoss, signalType,
                new BigDecimal("2.0"));

        // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
        TradingSignal signal = new TradingSignal(signalType, signalScore, description);
        signal.setInstrument(instrument);
        signal.setEntryPrice(entryPrice);
        signal.setStopLoss(stopLoss);
        signal.setTakeProfit(takeProfit);
        signal.setTimestamp(ZonedDateTime.now());
        signal.setSignalId(signalCounter.incrementAndGet());

        logger.info("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª #{}: {} –Ω–∞ {} –ø–æ —Ü–µ–Ω–µ {}, SL: {}, TP: {}",
                signal.getSignalId(), signalType, signal.getInstrument(),
                entryPrice, stopLoss, takeProfit);

        return signal;
    }

    /**
     * –†–∞—Å—á–µ—Ç –±–∞–ª–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
     */
    private int calculateSignalScore(TrendDirection trend,
                                     boolean emaCrossoverBullish,
                                     boolean emaCrossoverBearish,
                                     Num currentPrice,
                                     Num currentVWAP,
                                     Num currentATR) {
        int score = 0;

        // –ë–∞–ª–ª –∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞ (40 –±–∞–ª–ª–æ–≤)
        if ((trend == TrendDirection.BULLISH && emaCrossoverBullish) ||
                (trend == TrendDirection.BEARISH && emaCrossoverBearish)) {
            score += 40;
            logger.debug("üìä +40 –±–∞–ª–ª–æ–≤ –∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞");
        }

        // –ë–∞–ª–ª –∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VWAP (20 –±–∞–ª–ª–æ–≤)
        if ((trend == TrendDirection.BULLISH && currentPrice.isGreaterThan(currentVWAP)) ||
                (trend == TrendDirection.BEARISH && currentPrice.isLessThan(currentVWAP))) {
            score += 20;
            logger.debug("üìä +20 –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ VWAP");
        }

        // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (15 –±–∞–ª–ª–æ–≤) - –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è SDK v1.32
        if (lastOrderBook != null && lastOrderBook.getBidsCount() > 0 && lastOrderBook.getAsksCount() > 0) {
            long totalBidVolume = lastOrderBook.getBidsList().stream()
                    .mapToLong(Order::getQuantity)
                    .sum();
            long totalAskVolume = lastOrderBook.getAsksList().stream()
                    .mapToLong(Order::getQuantity)
                    .sum();

            if ((trend == TrendDirection.BULLISH && totalBidVolume > totalAskVolume * 1.2) ||
                    (trend == TrendDirection.BEARISH && totalAskVolume > totalBidVolume * 1.2)) {
                score += 15;
                logger.debug("üìä +15 –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç–∞–∫–∞–Ω–∞ (Bids: {}, Asks: {})",
                        totalBidVolume, totalAskVolume);
            }
        }

        // –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ ATR (10 –±–∞–ª–ª–æ–≤)
        BigDecimal atrValue = ((DecimalNum) currentATR).getDelegate();
        BigDecimal priceValue = ((DecimalNum) currentPrice).getDelegate();

        if (atrValue.compareTo(BigDecimal.ZERO) > 0) {
            BigDecimal minVolatility = priceValue.multiply(new BigDecimal("0.001")); // 0.1%
            if (atrValue.compareTo(minVolatility) > 0) {
                score += 10;
                logger.debug("üìä +10 –±–∞–ª–ª–æ–≤ –∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR: {})", atrValue);
            }
        }

        int finalScore = Math.min(score, 100);
        logger.debug("üìä –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å–∏–≥–Ω–∞–ª–∞: {} –∏–∑ 100", finalScore);

        return finalScore;
    }

    /**
     * –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
     */
    private BigDecimal calculateStopLoss(BigDecimal entryPrice,
                                         BigDecimal atrValue,
                                         TradingSignal.SignalType signalType) {
        BigDecimal atrMultiplier = new BigDecimal("1.5");

        if (signalType == TradingSignal.SignalType.BUY) {
            return entryPrice.subtract(atrValue.multiply(atrMultiplier))
                    .setScale(4, RoundingMode.HALF_UP);
        } else {
            return entryPrice.add(atrValue.multiply(atrMultiplier))
                    .setScale(4, RoundingMode.HALF_UP);
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
     */
    private BigDecimal calculateTakeProfit(BigDecimal entryPrice,
                                           BigDecimal stopLoss,
                                           TradingSignal.SignalType signalType,
                                           BigDecimal riskRewardRatio) {
        BigDecimal riskAmount = entryPrice.subtract(stopLoss).abs();

        if (signalType == TradingSignal.SignalType.BUY) {
            return entryPrice.add(riskAmount.multiply(riskRewardRatio))
                    .setScale(4, RoundingMode.HALF_UP);
        } else {
            return entryPrice.subtract(riskAmount.multiply(riskRewardRatio))
                    .setScale(4, RoundingMode.HALF_UP);
        }
    }

    /**
     * –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
     */
    public enum TrendDirection {
        BULLISH("–ë—ã—á–∏–π"),
        BEARISH("–ú–µ–¥–≤–µ–∂–∏–π");

        private final String displayName;

        TrendDirection(String displayName) {
            this.displayName = displayName;
        }

        @Override
        public String toString() {
            return displayName;
        }
    }
}
