package com.tradingbot.tinkoff.strategy;

import com.tradingbot.tinkoff.model.TradingSignal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.ta4j.core.BarSeries;
import com.tradingbot.tinkoff.model.TradableInstrument;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
public class MultiStrategyManager {
    private static final Logger logger = LoggerFactory.getLogger(MultiStrategyManager.class);

    private final Map<String, Object> strategies = new HashMap<>();
    private final Map<String, Integer> signalCounts = new ConcurrentHashMap<>();
    private final Map<String, Boolean> strategyEnabled = new ConcurrentHashMap<>();

    public MultiStrategyManager(BarSeries barSeries) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategies.put("SCALPING", new ScalpingMomentumStrategy(barSeries));
        strategies.put("MEAN_REVERSION_CONSERVATIVE", new MeanReversionStrategy(barSeries, StrategyConfig.getConservativeConfig()));
        strategies.put("MEAN_REVERSION_AGGRESSIVE", new MeanReversionStrategy(barSeries, StrategyConfig.getAggressiveConfig()));
        strategies.put("ADAPTIVE_TREND", new AdaptiveTrendStrategy(barSeries));

        // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        strategies.keySet().forEach(name -> strategyEnabled.put(name, true));

        logger.info("üéØ MultiStrategyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏", strategies.size());
    }

    public MultiStrategyManager(BarSeries barSeries, List<String> enabledStrategies) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ)
        strategies.put("SCALPING", new ScalpingMomentumStrategy(barSeries));
        strategies.put("MEAN_REVERSION_CONSERVATIVE", new MeanReversionStrategy(barSeries, StrategyConfig.getConservativeConfig()));
        strategies.put("MEAN_REVERSION_AGGRESSIVE", new MeanReversionStrategy(barSeries, StrategyConfig.getAggressiveConfig()));
        strategies.put("ADAPTIVE_TREND", new AdaptiveTrendStrategy(barSeries));

        // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ enabledStrategies
        strategies.keySet().forEach(name -> strategyEnabled.put(name, enabledStrategies.contains(name)));

        logger.info("üéØ MultiStrategyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏. –í–∫–ª—é—á–µ–Ω–æ: {}", strategies.size(), enabledStrategies);
    }

    public Set<String> getStrategyNames() {
        return strategies.keySet();
    }

    public void enableStrategy(String name, boolean enabled) {
        strategyEnabled.put(name, enabled);
        logger.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è {} {}", name, enabled ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–æ—Ç–∫–ª—é—á–µ–Ω–∞");
    }

    public List<String> getEnabledStrategyNames() {
        return strategyEnabled.entrySet().stream()
                .filter(Map.Entry::getValue)
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());
    }

    // –§–∞–π–ª: com/tradingbot/tinkoff/strategy/MultiStrategyManager.java

    public List<TradingSignal> analyzeAll(TradableInstrument instrument) {
        List<TradingSignal> finalSignals = new ArrayList<>();
        Map<String, TradingSignal> signalsByName = new HashMap<>();

        // 1. –°–æ–±—Ä–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategies.forEach((name, strategy) -> {
            if (strategyEnabled.get(name)) {
                try {
                    TradingSignal signal = null;
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ analyze –≤—ã–∑—ã–≤–∞—Ç—å
                    if (strategy instanceof ScalpingMomentumStrategy) {
                        signal = ((ScalpingMomentumStrategy) strategy).analyzeSignal(instrument);
                    } else if (strategy instanceof MeanReversionStrategy) {
                        signal = ((MeanReversionStrategy) strategy).analyzeSignal(instrument);
                    } else if (strategy instanceof AdaptiveTrendStrategy) {
                        signal = ((AdaptiveTrendStrategy) strategy).analyzeSignal(instrument);
                    }

                    if (signal != null && signal.getSignalType() != TradingSignal.SignalType.HOLD) {
                        signal.setDescription(String.format("[%s] %s", name, signal.getDescription()));
                        signalsByName.put(name, signal);
                        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Ç–æ–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    } else {
                        logger.debug("üîπ –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{}' –Ω–µ –Ω–∞—à–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (HOLD) –Ω–∞ —Ç–µ–∫—É—â–µ–º –±–∞—Ä–µ.", name);
                    }
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {}: {}", name, e.getMessage(), e);
                }
            }
        });

        // 2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–Ω—Å–∞–º–±–ª–µ–≤—É—é –ª–æ–≥–∏–∫—É (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
        TradingSignal meanReversionSignal = signalsByName.get("MEAN_REVERSION_AGGRESSIVE");
        TradingSignal adaptiveTrendSignal = signalsByName.get("ADAPTIVE_TREND");

        // –ü–†–ê–í–ò–õ–û: –ù–µ —à–æ—Ä—Ç–∏—Ç—å –ø–æ "Mean Reversion", –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –±—ã—á–∏–π
        // (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç AdaptiveTrendStrategy –µ—Å—Ç—å –º–µ—Ç–æ–¥ getTrend())
        if (meanReversionSignal != null && meanReversionSignal.getSignalType() == TradingSignal.SignalType.SELL &&
                adaptiveTrendSignal != null && adaptiveTrendSignal.getTrend() == TradingSignal.Trend.BULL) {

            logger.warn("–§–∏–ª—å—Ç—Ä –∞–Ω—Å–∞–º–±–ª—è: –°–∏–≥–Ω–∞–ª SELL –æ—Ç MEAN_REVERSION_AGGRESSIVE –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Ç.–∫. ADAPTIVE_TREND –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç BULL.");
            signalsByName.remove("MEAN_REVERSION_AGGRESSIVE"); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏–π —Å–∏–≥–Ω–∞–ª
        }

        // –ü–†–ê–í–ò–õ–û: –ù–µ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ "Mean Reversion", –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –º–µ–¥–≤–µ–∂–∏–π
        if (meanReversionSignal != null && meanReversionSignal.getSignalType() == TradingSignal.SignalType.BUY &&
                adaptiveTrendSignal != null && adaptiveTrendSignal.getTrend() == TradingSignal.Trend.BEAR) {

            logger.warn("–§–∏–ª—å—Ç—Ä –∞–Ω—Å–∞–º–±–ª—è: –°–∏–≥–Ω–∞–ª BUY –æ—Ç MEAN_REVERSION_AGGRESSIVE –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Ç.–∫. ADAPTIVE_TREND –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç BEAR.");
            signalsByName.remove("MEAN_REVERSION_AGGRESSIVE");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        if (!signalsByName.isEmpty()) {
            finalSignals.addAll(signalsByName.values());
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
            signalsByName.keySet().forEach(name -> signalCounts.merge(name, 1, Integer::sum));
            finalSignals.forEach(s -> logger.info("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ –∞–Ω—Å–∞–º–±–ª—è: {} –æ—Ç {}", s.getSignalType(), s.getDescription()));
        }

        return finalSignals;
    }


    public int getUnstablePeriod() {
        return strategies.values().stream()
                .mapToInt(strategy -> {
                    if (strategy instanceof ScalpingMomentumStrategy) return ((ScalpingMomentumStrategy) strategy).getUnstablePeriod();
                    if (strategy instanceof MeanReversionStrategy) return ((MeanReversionStrategy) strategy).getUnstablePeriod();
                    if (strategy instanceof AdaptiveTrendStrategy) return ((AdaptiveTrendStrategy) strategy).getUnstablePeriod();
                    return 0;
                })
                .max()
                .orElse(25);
    }

    public void printStatistics() {
        logger.info("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ô ===");
        signalCounts.forEach((name, count) ->
                logger.info("{}: {} —Å–∏–≥–Ω–∞–ª–æ–≤", name, count));
    }
}