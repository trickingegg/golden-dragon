package com.tradingbot.tinkoff.strategy;

import com.tradingbot.tinkoff.model.TradingSignal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.ta4j.core.BarSeries;
import org.ta4j.core.indicators.RSIIndicator;
import org.ta4j.core.indicators.helpers.ClosePriceIndicator;
import org.ta4j.core.indicators.volume.VWAPIndicator;
import org.ta4j.core.num.Num;
import org.ta4j.core.num.DecimalNum;
import ru.tinkoff.piapi.contract.v1.OrderBook;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.ZonedDateTime;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI –∏ –æ–±—ä–µ–º–∞
 * –¶–µ–ª—å: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–ª–∫–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
 */
public class ScalpingMomentumStrategy {
    private static final Logger logger = LoggerFactory.getLogger(ScalpingMomentumStrategy.class);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    private static final int RSI_PERIOD = 7;  // –ë—ã—Å—Ç—Ä—ã–π RSI
    private static final int VWAP_PERIOD = 14; // –ö–æ—Ä–æ—Ç–∫–∏–π VWAP
    private static final double RSI_OVERSOLD = 25;
    private static final double RSI_OVERBOUGHT = 75;

    private final BarSeries barSeries;
    private final ClosePriceIndicator closePrice;
    private final RSIIndicator rsi;
    private final VWAPIndicator vwap;
    private final AtomicInteger signalCounter = new AtomicInteger(0);

    public ScalpingMomentumStrategy(BarSeries barSeries) {
        this.barSeries = barSeries;
        this.closePrice = new ClosePriceIndicator(barSeries);
        this.rsi = new RSIIndicator(closePrice, RSI_PERIOD);
        this.vwap = new VWAPIndicator(barSeries, VWAP_PERIOD);

        logger.info("üéØ ScalpingMomentumStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (RSI={}, VWAP={})", RSI_PERIOD, VWAP_PERIOD);
    }

    public int getUnstablePeriod() { return Math.max(RSI_PERIOD, VWAP_PERIOD) + 1; }

    public void updateOrderBook(OrderBook orderBook) { }

    public TradingSignal analyzeSignal(com.tradingbot.tinkoff.model.TradableInstrument instrument) {
        int lastIndex = barSeries.getEndIndex();
        if (lastIndex < getUnstablePeriod()) {
            return new TradingSignal(TradingSignal.SignalType.HOLD, 0, "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö");
        }

        Num currentPrice = closePrice.getValue(lastIndex);
        Num vwapValue = vwap.getValue(lastIndex);
        Num rsiValue = rsi.getValue(lastIndex);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ VWAP
        boolean bullishTrend = currentPrice.isGreaterThan(vwapValue);

        logger.debug("üìä –°–∫–∞–ª—å–ø–∏–Ω–≥ –∞–Ω–∞–ª–∏–∑: Price={}, VWAP={}, RSI={}, Trend={}",
                currentPrice, vwapValue, rsiValue, bullishTrend ? "BULL" : "BEAR");

        // –°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£: –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ + RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        if (bullishTrend && rsiValue.doubleValue() < RSI_OVERSOLD) {
            return createScalpingSignal(TradingSignal.SignalType.BUY, "RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω –≤ –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ", lastIndex, instrument);
        }

        // –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£: –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ + RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
        if (!bullishTrend && rsiValue.doubleValue() > RSI_OVERBOUGHT) {
            return createScalpingSignal(TradingSignal.SignalType.SELL, "RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ", lastIndex, instrument);
        }

        return new TradingSignal(TradingSignal.SignalType.HOLD, 0, "–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞");
    }

    private TradingSignal createScalpingSignal(TradingSignal.SignalType type, String reason, int index, com.tradingbot.tinkoff.model.TradableInstrument instrument) {
        Num currentPrice = closePrice.getValue(index);
        BigDecimal entryPrice = ((DecimalNum) currentPrice).getDelegate();

        // –°–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏: —É–∑–∫–∏–π —Å—Ç–æ–ø, –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ñ–∏—Ç
        BigDecimal pricePercent = entryPrice.multiply(new BigDecimal("0.003")); // 0.3%

        BigDecimal stopLoss, takeProfit;
        if (type == TradingSignal.SignalType.BUY) {
            stopLoss = entryPrice.subtract(pricePercent).setScale(4, RoundingMode.HALF_UP);
            takeProfit = entryPrice.add(pricePercent.multiply(new BigDecimal("2"))).setScale(4, RoundingMode.HALF_UP);
        } else {
            stopLoss = entryPrice.add(pricePercent).setScale(4, RoundingMode.HALF_UP);
            takeProfit = entryPrice.subtract(pricePercent.multiply(new BigDecimal("2"))).setScale(4, RoundingMode.HALF_UP);
        }

        TradingSignal signal = new TradingSignal(type, 88, reason);
        signal.setInstrument(instrument);
        signal.setEntryPrice(entryPrice);
        signal.setStopLoss(stopLoss);
        signal.setTakeProfit(takeProfit);
        signal.setTimestamp(ZonedDateTime.now());
        signal.setSignalId(signalCounter.incrementAndGet());

        logger.info("‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª: {} –ø–æ {} (SL: {}, TP: {})", type, entryPrice, stopLoss, takeProfit);
        return signal;
    }
}
