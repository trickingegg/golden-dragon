package com.tradingbot.tinkoff.tracking;

import com.tradingbot.tinkoff.model.TradingSignal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
 */
public class SignalTracker {
    private static final Logger logger = LoggerFactory.getLogger(SignalTracker.class);

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–æ–∂–∏–¥–∞—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    private final ConcurrentHashMap<Integer, TrackedSignal> activeSignals = new ConcurrentHashMap<>();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private final AtomicInteger totalSignals = new AtomicInteger(0);
    private final AtomicInteger successfulSignals = new AtomicInteger(0);
    private final AtomicInteger failedSignals = new AtomicInteger(0);
    private final AtomicInteger expiredSignals = new AtomicInteger(0);

    public void trackSignal(TradingSignal signal) {
        TrackedSignal trackedSignal = new TrackedSignal(signal, ZonedDateTime.now());
        activeSignals.put(signal.getSignalId(), trackedSignal);
        totalSignals.incrementAndGet();

        logger.info("üéØ –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ #{}: {} –ø–æ —Ü–µ–Ω–µ {}",
                signal.getSignalId(), signal.getSignalType(), signal.getEntryPrice());
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    public void updatePrice(String instrumentIdentifier, BigDecimal currentPrice) {
        // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –¥–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
        activeSignals.values().stream()
                .filter(trackedSignal -> trackedSignal.getSignal().getInstrument().identifier().equals(instrumentIdentifier))
                .forEach(trackedSignal -> {
                    SignalResult result = checkSignalResult(trackedSignal, currentPrice);

                    if (result != SignalResult.ACTIVE) {
                        completeSignal(trackedSignal, result, currentPrice);
                    }
                });
    }

    private SignalResult checkSignalResult(TrackedSignal tracked, BigDecimal currentPrice) {
        TradingSignal signal = tracked.getSignal();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (24 —á–∞—Å–∞)
        if (ZonedDateTime.now().isAfter(tracked.getStartTime().plusHours(24))) {
            return SignalResult.EXPIRED;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Take Profit
        if (signal.getSignalType() == TradingSignal.SignalType.BUY) {
            if (currentPrice.compareTo(signal.getTakeProfit()) >= 0) {
                return SignalResult.SUCCESS;
            }
            if (currentPrice.compareTo(signal.getStopLoss()) <= 0) {
                return SignalResult.FAILED;
            }
        } else if (signal.getSignalType() == TradingSignal.SignalType.SELL) {
            if (currentPrice.compareTo(signal.getTakeProfit()) <= 0) {
                return SignalResult.SUCCESS;
            }
            if (currentPrice.compareTo(signal.getStopLoss()) >= 0) {
                return SignalResult.FAILED;
            }
        }

        return SignalResult.ACTIVE;
    }

    private void completeSignal(TrackedSignal tracked, SignalResult result, BigDecimal finalPrice) {
        activeSignals.remove(tracked.getSignal().getSignalId());

        long durationMinutes = tracked.getStartTime().until(ZonedDateTime.now(), ChronoUnit.MINUTES);
        BigDecimal profit = calculateProfit(tracked.getSignal(), finalPrice);

        switch (result) {
            case SUCCESS:
                successfulSignals.incrementAndGet();
                logger.info("‚úÖ –°–∏–≥–Ω–∞–ª #{} –£–°–ü–ï–®–ï–ù! –ü—Ä–∏–±—ã–ª—å: {}. –í—Ä–µ–º—è: {} –º–∏–Ω",
                        tracked.getSignal().getSignalId(), profit, durationMinutes);
                break;
            case FAILED:
                failedSignals.incrementAndGet();
                logger.info("‚ùå –°–∏–≥–Ω–∞–ª #{} –ü–†–û–í–ê–õ–ï–ù! –£–±—ã—Ç–æ–∫: {}. –í—Ä–µ–º—è: {} –º–∏–Ω",
                        tracked.getSignal().getSignalId(), profit, durationMinutes);
                break;
            case EXPIRED:
                expiredSignals.incrementAndGet();
                logger.info("‚è∞ –°–∏–≥–Ω–∞–ª #{} –ò–°–¢–ï–ö! –†–µ–∑—É–ª—å—Ç–∞—Ç: {}. –í—Ä–µ–º—è: {} –º–∏–Ω",
                        tracked.getSignal().getSignalId(), profit, durationMinutes);
                break;
            default:
                // ACTIVE —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é, –ø–æ—ç—Ç–æ–º—É –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –∑–¥–µ—Å—å
                break;
        }
    }

    private BigDecimal calculateProfit(TradingSignal signal, BigDecimal finalPrice) {
        BigDecimal entryPrice = signal.getEntryPrice();
        BigDecimal difference = finalPrice.subtract(entryPrice);

        if (signal.getSignalType() == TradingSignal.SignalType.SELL) {
            difference = difference.negate();
        }

        return difference.divide(entryPrice, 4, RoundingMode.HALF_UP).multiply(new BigDecimal("100"));
    }

    public void printStatistics() {
        int total = totalSignals.get();
        int success = successfulSignals.get();
        int failed = failedSignals.get();
        int expired = expiredSignals.get();
        int active = activeSignals.size();

        double successRate = total > 0 ? (success * 100.0) / total : 0;

        logger.info("=== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í ===");
        logger.info("–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {}", total);
        logger.info("–£—Å–ø–µ—à–Ω—ã—Ö: {} ({:.1f}%)", success, successRate);
        logger.info("–ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö: {}", failed);
        logger.info("–ò—Å—Ç–µ–∫—à–∏—Ö: {}", expired);
        logger.info("–ê–∫—Ç–∏–≤–Ω—ã—Ö: {}", active);
        logger.info("============================");
    }

    // –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    public static class TrackedSignal {
        private final TradingSignal signal;
        private final ZonedDateTime startTime;
        private final BigDecimal stopLossPrice;
        private final BigDecimal takeProfitPrice;

        public TrackedSignal(TradingSignal signal, ZonedDateTime startTime) {
            this.signal = signal;
            this.startTime = startTime;
            this.stopLossPrice = signal.getStopLoss();
            this.takeProfitPrice = signal.getTakeProfit();
        }

        public TradingSignal getSignal() { return signal; }
        public ZonedDateTime getStartTime() { return startTime; }

        public BigDecimal getStopLossPrice() { return stopLossPrice; }
        public BigDecimal getTakeProfitPrice() { return takeProfitPrice; }
    }

    public TrackedSignal getTrackedSignal(String figi) {
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        return activeSignals.values().stream()
                .filter(ts -> ts.getSignal().getInstrument().identifier().equals(figi))
                .findFirst()
                .orElse(null);
    }

    public enum SignalResult {
        ACTIVE, SUCCESS, FAILED, EXPIRED
    }
}
