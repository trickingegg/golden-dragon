package com.tradingbot.tinkoff.risk;

import com.tradingbot.tinkoff.model.TradableInstrument;
import com.tradingbot.tinkoff.model.TradingSignal;
import com.tradingbot.tinkoff.api.TinkoffApiConnector;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è SDK v1.32
import ru.tinkoff.piapi.contract.v1.GetFuturesMarginResponse;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Map;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Tinkoff SDK v1.32
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Portfolio –∏ Position
 */
public class RiskManager {
    private static final Logger logger = LoggerFactory.getLogger(RiskManager.class);
    private static final int MIN_SIGNAL_SCORE = 10;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    @Getter @Setter
    private BigDecimal riskPercentage; // 1% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É

    // private final BigDecimal maxRiskPercentage = new BigDecimal("5.0"); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
    private final BigDecimal minPositionSize; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö
    private final BigDecimal maxPositionPercent; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
    private final BigDecimal stopLossDistancePercent; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    private final BigDecimal minStopDistance;

    private final TinkoffApiConnector apiConnector;

    public RiskManager(BigDecimal riskPerTradePercent, BigDecimal minPositionSizeRub,
                       BigDecimal maxPositionPercent, BigDecimal stopLossDistancePercent,
                       BigDecimal minStopDistance, TinkoffApiConnector apiConnector) {
        this.riskPercentage = riskPerTradePercent;
        this.minPositionSize = minPositionSizeRub;
        this.maxPositionPercent = maxPositionPercent;
        this.stopLossDistancePercent = stopLossDistancePercent;
        this.minStopDistance = minStopDistance;
        this.apiConnector = apiConnector;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
     */
    public ValidationResult validateSignal(TradableInstrument instrument, TradingSignal signal, ru.tinkoff.piapi.core.models.Portfolio portfolio, Map<String, BigDecimal> availableBalances, ru.tinkoff.piapi.core.models.Position currentPosition) {
        logger.debug("üîç –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {}", signal != null ? signal.getSignalType() : "null");

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        ValidationResult basicValidation = validateBasicSignal(signal);
        if (!basicValidation.isValid()) {
            return basicValidation;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if (portfolio == null) {
            logger.warn("‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
            return ValidationResult.invalid("–î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        }

        BigDecimal initialCapital = calculateTotalPortfolioValue(portfolio);
        BigDecimal availableCurrencyBalance = availableBalances.getOrDefault(instrument.currency(), BigDecimal.ZERO);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        BigDecimal currentPrice = null; // <<-- –ò–ó–ú–ï–ù–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è null
        if (signal != null) { // <<-- –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç NullPointerException
            currentPrice = signal.getEntryPrice();
        }

        if (currentPrice == null) {
            return ValidationResult.invalid("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.");
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        BigDecimal riskRewardRatio = calculateRiskRewardRatio(signal);
        if (riskRewardRatio.compareTo(new BigDecimal("1.5")) < 0) {
            logger.warn("[{}] –ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: 1:{}", instrument.name(), riskRewardRatio);
            return ValidationResult.invalid(String.format("–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: 1:%.2f (—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚â•1:1.5)", riskRewardRatio));
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞
        ValidationResult concentrationCheck = checkRiskConcentration(signal, portfolio);
        if (!concentrationCheck.isValid()) {
            return concentrationCheck;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç "–º–∏–∫—Ä–æ-—Å—Ç–æ–ø–æ–≤" (—Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏—Ö —Å—Ç–æ–ø–æ–≤)
        BigDecimal actualStopDistance = currentPrice.multiply(stopLossDistancePercent.divide(new BigDecimal("100"), 8, RoundingMode.HALF_UP));
        if (actualStopDistance.compareTo(minStopDistance) < 0) {
            logger.warn("[{}] –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ ({} < {}).",
                    instrument.name(), actualStopDistance.toPlainString(), minStopDistance.toPlainString());
            return ValidationResult.invalid("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞.");
        }

        // –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        PositionSizeResult positionSizeResult = calculatePositionSize(
                instrument, signal, portfolio, availableBalances, currentPosition, initialCapital);

        if (!positionSizeResult.isValid()) {
            return ValidationResult.invalid(positionSizeResult.getDescription());
        }

        BigDecimal lotsToTrade = positionSizeResult.getPositionSize();
        BigDecimal tradeAmount = positionSizeResult.getPositionSizeInRubles();

        logger.debug("üí∞ –†–∞—Å—á–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {} RUB", tradeAmount.toPlainString());

        // –£—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        if (instrument.type() == TradableInstrument.InstrumentType.FUTURE) {
            try {
                GetFuturesMarginResponse futuresMargin = apiConnector.getFuturesMarginResponse(instrument.identifier()).join();
                BigDecimal initialMargin = BigDecimal.ZERO;
                if (signal != null && signal.getSignalType() == TradingSignal.SignalType.BUY) {
                    initialMargin = TinkoffApiConnector.moneyValueToBigDecimal(futuresMargin.getInitialMarginOnBuy());
                } else if (signal != null && signal.getSignalType() == TradingSignal.SignalType.SELL) {
                    initialMargin = TinkoffApiConnector.moneyValueToBigDecimal(futuresMargin.getInitialMarginOnSell());
                }
                if (initialMargin.compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal requiredMarginForTrade = initialMargin.multiply(lotsToTrade);
                    logger.debug("üìä [–§—å—é—á–µ—Ä—Å] –¢—Ä–µ–±—É–µ–º–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ –¥–ª—è {} –ª–æ—Ç–æ–≤: {} {}",
                            lotsToTrade, requiredMarginForTrade.toPlainString(), instrument.currency().toUpperCase());

                    if (availableCurrencyBalance.compareTo(requiredMarginForTrade) < 0) {
                        return ValidationResult.invalid(String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: %s, –î–æ—Å—Ç—É–ø–Ω–æ: %s",
                                requiredMarginForTrade.toPlainString(), availableCurrencyBalance.toPlainString()));
                    }
                } else {
                    logger.warn("[{}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–∞.", instrument.name());
                }

            } catch (Exception e) {
                logger.error("[{}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–∞: {}", instrument.name(), e.getMessage(), e);
                return ValidationResult.invalid("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.");
            }
        } else { // –î–ª—è –∞–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if (availableCurrencyBalance.compareTo(tradeAmount) < 0) {
                return ValidationResult.invalid(String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: %s, –î–æ—Å—Ç—É–ø–Ω–æ: %s",
                        tradeAmount.toPlainString(), availableCurrencyBalance.toPlainString()));
            }
        }

        logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: {} –ª–æ—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É {} {}",
                lotsToTrade.toPlainString(), tradeAmount.toPlainString(), instrument.currency().toUpperCase());
        return ValidationResult.valid(lotsToTrade, tradeAmount, "–°–∏–≥–Ω–∞–ª –≤–∞–ª–∏–¥–µ–Ω.");
    }

    /**
     * –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
     */
    private ValidationResult validateBasicSignal(TradingSignal signal) {
        if (signal == null) {
            logger.warn("‚ùå –°–∏–≥–Ω–∞–ª —Ä–∞–≤–µ–Ω null");
            return ValidationResult.invalid("–°–∏–≥–Ω–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }

        if (signal.getSignalType() == TradingSignal.SignalType.HOLD) {
            logger.debug("‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª —Ç–∏–ø–∞ HOLD - –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
            return ValidationResult.invalid("–°–∏–≥–Ω–∞–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π (HOLD)");
        }

        if (signal.getScore() < MIN_SIGNAL_SCORE) {
            logger.warn("–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å ({} < {})", signal.getScore(), MIN_SIGNAL_SCORE);
            return ValidationResult.invalid(
                    String.format("–ù–∏–∑–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: %d < %d", signal.getScore(), MIN_SIGNAL_SCORE));
        }

        if (signal.getEntryPrice() == null || signal.getStopLoss() == null) {
            logger.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ü–µ–Ω");
            return ValidationResult.invalid("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å");
        }

        return ValidationResult.valid(BigDecimal.ZERO, BigDecimal.ZERO, "–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞");
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è SDK v1.32
     */
    private PositionSizeResult calculatePositionSize(com.tradingbot.tinkoff.model.TradableInstrument instrument,
                                                      TradingSignal signal,
                                                      ru.tinkoff.piapi.core.models.Portfolio portfolio,
                                                      Map<String, BigDecimal> availableBalances,
                                                      ru.tinkoff.piapi.core.models.Position currentPosition,
                                                      BigDecimal totalCapital) { // <<-- –î–û–ë–ê–í–õ–ï–ù–û
        try {
            // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            // BigDecimal totalCapital = calculateTotalPortfolioValue(portfolio); // <<-- –£–î–ê–õ–ï–ù–û

            logger.debug("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {} RUB", totalCapital);

            if (totalCapital.compareTo(BigDecimal.ZERO) <= 0) {
                return new PositionSizeResult(false, BigDecimal.ZERO,
                        "–ù—É–ª–µ–≤–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è", null, null, null);
            }

            BigDecimal entryPrice = signal.getEntryPrice();
            BigDecimal stopLoss = signal.getStopLoss();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–ø-–¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–∏–∫—Ä–æ-—Å—Ç–æ–ø–æ–≤
            BigDecimal minStopDistance = entryPrice.multiply(new BigDecimal("0.001")); // –ù–∞–ø—Ä–∏–º–µ—Ä, 0.1% –æ—Ç —Ü–µ–Ω—ã
            BigDecimal actualStopDistance = entryPrice.subtract(stopLoss).abs();
            if (actualStopDistance.compareTo(minStopDistance) < 0) {
                return new PositionSizeResult(false, BigDecimal.ZERO,
                        String.format("–°—Ç–æ–ø-–¥–∏—Å—Ç–∞–Ω—Ü–∏—è (%.4f) —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ (–º–∏–Ω. %.4f)", actualStopDistance, minStopDistance), null, null, null);
            }

            if (actualStopDistance.compareTo(BigDecimal.ZERO) == 0) {
                return new PositionSizeResult(false, BigDecimal.ZERO,
                        "–°—Ç–æ–ø-–ª–æ—Å—Å —Ä–∞–≤–µ–Ω —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞", null, null, null);
            }

            // –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
            BigDecimal maxRiskAmount = totalCapital
                    .multiply(riskPercentage)
                    .divide(new BigDecimal("100"), 2, RoundingMode.HALF_UP);

            // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –ª–æ—Ç–∞—Ö, –±–µ–∑ —É—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            // –ë–´–õ–û:
            // BigDecimal calculatedLots = maxRiskAmount.divide(actualStopDistance.multiply(entryPrice), 0, RoundingMode.DOWN);
            // –°–¢–ê–õ–û (–¥–ª—è –∞–∫—Ü–∏–π, –≥–¥–µ 1 –ª–æ—Ç = 1 –∞–∫—Ü–∏—è):
            BigDecimal calculatedLots = maxRiskAmount.divide(actualStopDistance, 0, RoundingMode.DOWN);

            // ========== –õ–û–ì–ò–ö–ê –ù–ï–¢–¢–ò–ù–ì–ê –ü–û–ó–ò–¶–ò–ô –ò –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ù–´–• –°–†–ï–î–°–¢–í ===========
            BigDecimal lotsToTrade = BigDecimal.ZERO;
            BigDecimal availableCurrencyBalance = availableBalances.getOrDefault(instrument.currency(), BigDecimal.ZERO);

            if (currentPosition != null && currentPosition.getQuantity().compareTo(BigDecimal.ZERO) != 0) {
                // –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
                boolean isLong = currentPosition.getQuantity().signum() > 0;

                if ((isLong && signal.getSignalType() == TradingSignal.SignalType.SELL) ||
                        (!isLong && signal.getSignalType() == TradingSignal.SignalType.BUY)) {
                    // –†–µ–≤–µ—Ä—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                    BigDecimal currentLots = currentPosition.getQuantity();
                    lotsToTrade = currentLots.negate(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–≤–µ—Ä—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é {} –ª–æ—Ç–æ–≤.", currentLots);

                    // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤ –¥—Ä—É–≥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–æ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞
                    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–æ –¥–ª—è MVP –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∑–∞–∫—Ä—ã—Ç–∏—é
                    // TODO: –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–µ—Ç—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                    lotsToTrade = lotsToTrade.add(calculatedLots); // –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                } else {
                    // –°–∏–≥–Ω–∞–ª –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, —á—Ç–æ –∏ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
                    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
                    lotsToTrade = calculatedLots;
                }
            } else {
                // –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                lotsToTrade = calculatedLots;
            }

            if (lotsToTrade.compareTo(BigDecimal.ZERO) <= 0) {
                return new PositionSizeResult(false, BigDecimal.ZERO, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ <= 0", null, null, null);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤/–º–∞—Ä–∂–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            BigDecimal requiredFunds = lotsToTrade.multiply(entryPrice);
            if (availableCurrencyBalance.compareTo(requiredFunds) < 0) {
                // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
                BigDecimal affordableLots = availableCurrencyBalance.divide(entryPrice, 0, RoundingMode.DOWN);
                if (affordableLots.compareTo(BigDecimal.ZERO) == 0) {
                    return new PositionSizeResult(false, BigDecimal.ZERO,
                            String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (%s %s) –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–∂–µ 1 –ª–æ—Ç–∞ –ø–æ %s %s",
                                    availableCurrencyBalance, instrument.currency(), entryPrice, instrument.currency()), null, null, null);
                }
                lotsToTrade = affordableLots;
                logger.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —É–º–µ–Ω—å—à–∞–µ–º –∑–∞—è–≤–∫—É –¥–æ {} –ª–æ—Ç–æ–≤.", lotsToTrade);
            }

            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –ª–æ—Ç–Ω–æ—Å—Ç—å
            if (lotsToTrade.multiply(entryPrice).compareTo(minPositionSize) < 0) { // <<-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º minPositionSize
                return new PositionSizeResult(false, BigDecimal.ZERO,
                        String.format("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%.2f %s) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ (%.2f %s)",
                                lotsToTrade.multiply(entryPrice), instrument.currency(), minPositionSize, instrument.currency()), null, null, null);
            }

            // TODO: –£—á–µ—Å—Ç—å instrument.lot() –∏ instrument.minPriceIncrement()

            BigDecimal positionSizeInRubles = lotsToTrade.multiply(entryPrice);
            BigDecimal positionPercentage = positionSizeInRubles
                    .divide(totalCapital, 4, RoundingMode.HALF_UP)
                    .multiply(new BigDecimal("100"));

            if (positionPercentage.compareTo(maxPositionPercent) > 0) {
                logger.warn("‚ö†Ô∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%.1f%%) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π (%.1f%%). –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞...",
                        positionPercentage, maxPositionPercent);
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º positionSizeInRubles, —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ maxPositionPercent
                positionSizeInRubles = totalCapital.multiply(maxPositionPercent).divide(new BigDecimal("100"), 2, RoundingMode.HALF_UP);
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º lotsToTrade –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ positionSizeInRubles
                if (entryPrice.compareTo(BigDecimal.ZERO) > 0) {
                    lotsToTrade = positionSizeInRubles.divide(entryPrice, 0, RoundingMode.DOWN);
                } else {
                    lotsToTrade = BigDecimal.ZERO; // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                }

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                if (lotsToTrade.multiply(entryPrice).compareTo(minPositionSize) < 0) {
                    return new PositionSizeResult(false, BigDecimal.ZERO,
                            String.format("–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%.2f %s) –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ (%.2f %s)",
                                    lotsToTrade.multiply(entryPrice), instrument.currency(), minPositionSize, instrument.currency()), null, null, null);
                }

                positionPercentage = maxPositionPercent; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
            }

            String description = String.format("–ü–æ–∑–∏—Ü–∏—è: %.2f %s (%.1f%% –∫–∞–ø–∏—Ç–∞–ª–∞), %s –ª–æ—Ç–æ–≤",
                    positionSizeInRubles, instrument.currency(), positionPercentage, lotsToTrade);

            logger.debug("üìä –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: {} –ª–æ—Ç–æ–≤, {} {} ({}% –∫–∞–ø–∏—Ç–∞–ª–∞)",
                    lotsToTrade, positionSizeInRubles, instrument.currency(), positionPercentage);

            return new PositionSizeResult(true, lotsToTrade, description,
                    positionSizeInRubles, maxRiskAmount, positionPercentage);

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏", e);
            return new PositionSizeResult(false, BigDecimal.ZERO,
                    "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: " + e.getMessage(), null, null, null);
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SDK v1.32
     */
    // –§–∞–π–ª: src/main/java/com/tradingbot/tinkoff/risk/RiskManager.java

    private BigDecimal calculateTotalPortfolioValue(ru.tinkoff.piapi.core.models.Portfolio portfolio) {
        if (portfolio == null) {
            logger.warn("–ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–æ–ª—å.");
            return BigDecimal.ZERO;
        }

        // 1. –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥
        BigDecimal positionsValue = portfolio.getPositions().stream()
                .map(position -> position.getQuantity()
                        .multiply(TinkoffApiConnector.moneyToBigDecimal(position.getCurrentPrice())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // 2. –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        BigDecimal currenciesValue = TinkoffApiConnector.moneyToBigDecimal(portfolio.getTotalAmountCurrencies());

        BigDecimal totalValue = positionsValue.add(currenciesValue);
        logger.debug("–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: –ü–æ–∑–∏—Ü–∏–∏={} + –í–∞–ª—é—Ç–∞={} = {}", positionsValue, currenciesValue, totalValue);

        return totalValue;
    }


    /**
     * –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
     */
    private BigDecimal calculateRiskRewardRatio(TradingSignal signal) {
        try {
            BigDecimal entryPrice = signal.getEntryPrice();
            BigDecimal stopLoss = signal.getStopLoss();
            BigDecimal takeProfit = signal.getTakeProfit();

            if (entryPrice == null || stopLoss == null || takeProfit == null) {
                logger.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ R/R");
                return BigDecimal.ZERO;
            }

            BigDecimal risk = entryPrice.subtract(stopLoss).abs();
            BigDecimal reward = takeProfit.subtract(entryPrice).abs();

            if (risk.compareTo(BigDecimal.ZERO) == 0) {
                logger.warn("‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π —Ä–∏—Å–∫ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ R/R");
                return BigDecimal.ZERO;
            }

            BigDecimal ratio = reward.divide(risk, 2, RoundingMode.HALF_UP);
            logger.debug("üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: 1:{}", ratio);

            return ratio;

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ R/R", e);
            return BigDecimal.ZERO;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞
     */
    private ValidationResult checkRiskConcentration(TradingSignal signal, ru.tinkoff.piapi.core.models.Portfolio portfolio) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
        // - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        // - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ
        // - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        return ValidationResult.valid(BigDecimal.ZERO, BigDecimal.ZERO, "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–∏—Å–∫–∞ –≤ –Ω–æ—Ä–º–µ");
    }

    // =============== –†–ï–ó–£–õ–¨–¢–ò–†–£–Æ–©–ò–ï –ö–õ–ê–°–°–´ ===============

    @Getter @Setter @AllArgsConstructor
    public static class PositionSizeResult {
        private final boolean valid;
        private final BigDecimal positionSize; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
        private final String description;
        private BigDecimal positionSizeInRubles; // –†–∞–∑–º–µ—Ä –≤ –≤–∞–ª—é—Ç–µ
        private BigDecimal riskAmount; // –†–∞–∑–º–µ—Ä —Ä–∏—Å–∫–∞
        private BigDecimal positionPercentage; // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
    }

    @Getter @AllArgsConstructor
    public static class ValidationResult {
        private final boolean valid;
        private final String message;
        private final BigDecimal lots;
        private final BigDecimal tradeAmount; // <<-- –î–û–ë–ê–í–õ–ï–ù–û

        public ValidationResult(boolean valid, String message, BigDecimal lots) {
            this(valid, message, lots, BigDecimal.ZERO); // <<-- –ò–ó–ú–ï–ù–ï–ù–û
        }

        public static ValidationResult invalid(String message) {
            return new ValidationResult(false, message, BigDecimal.ZERO, BigDecimal.ZERO); // <<-- –ò–ó–ú–ï–ù–ï–ù–û
        }

        public static ValidationResult valid(BigDecimal lots, BigDecimal tradeAmount, String message) {
            return new ValidationResult(true, message, lots, tradeAmount); // <<-- –ò–ó–ú–ï–ù–ï–ù–û
        }
    }
}
