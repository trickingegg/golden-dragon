package com.tradingbot.tinkoff.controller;

import com.tradingbot.tinkoff.api.TinkoffApiConnector;
import com.tradingbot.tinkoff.model.OrderInfo;
import com.tradingbot.tinkoff.model.TradableInstrument;
import com.tradingbot.tinkoff.model.TradingSignal;
import com.tradingbot.tinkoff.monitoring.ApiUsageMonitor;
import com.tradingbot.tinkoff.processor.InstrumentProcessor;
import com.tradingbot.tinkoff.strategy.MultiStrategyManager;
import org.ta4j.core.BaseBarSeriesBuilder;
import com.tradingbot.tinkoff.tracking.SignalTracker;
import javafx.application.Platform;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.tinkoff.piapi.contract.v1.CandleInterval;
import ru.tinkoff.piapi.contract.v1.OrderDirection;
import ru.tinkoff.piapi.core.models.Portfolio;
import ru.tinkoff.piapi.core.models.Position;
//import ru.tinkoff.piapi.core.models.Portfolio;

import java.math.BigDecimal;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.time.Instant;
import com.tradingbot.tinkoff.model.TrackedPosition;
// import com.tradingbot.tinkoff.strategy.MultiStrategyManager; // –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç —É–∂–µ –µ—Å—Ç—å
// import com.tradingbot.tinkoff.strategy.BaseBarSeriesBuilder; // –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç —É–∂–µ –µ—Å—Ç—å

public class MainController {
    private static final Logger logger = LoggerFactory.getLogger(MainController.class);

    @FXML private TextField tokenField;
    @FXML private ListView<TradableInstrument> instrumentListView; // <<-- –ò–ó–ú–ï–ù–ï–ù–û: ChoiceBox -> ListView
    @FXML private ChoiceBox<CandleInterval> intervalChoiceBox;
    @FXML private Button startButton;
    @FXML private Button stopButton;
    @FXML private Button connectButton;
    @FXML private Button depositButton;
    @FXML private TextArea logTextArea;
    @FXML private TableView<TradingSignal> signalsTable;
    @FXML private TableColumn<TradingSignal, String> signalInstrumentColumn; // <<-- –î–û–ë–ê–í–õ–ï–ù–û
    @FXML private TableColumn<TradingSignal, String> signalTimeColumn;
    @FXML private TableColumn<TradingSignal, String> signalTypeColumn;
    @FXML private TableColumn<TradingSignal, String> signalScoreColumn;
    @FXML private TableColumn<TradingSignal, String> signalPriceColumn;
    @FXML private Label balanceLabel;
    @FXML private TextField depositAmountField;

    @FXML private TableView<OrderInfo> activeOrdersTable;
    @FXML private TableColumn<OrderInfo, String> activeOrderTimeColumn;
    @FXML private TableColumn<OrderInfo, String> activeOrderInstrumentColumn;
    @FXML private TableColumn<OrderInfo, String> activeOrderDirectionColumn;
    @FXML private TableColumn<OrderInfo, String> activeOrderQuantityColumn;
    @FXML private TableColumn<OrderInfo, String> activeOrderPriceColumn;
    @FXML private TableColumn<OrderInfo, String> activeOrderStatusColumn;

    @FXML private TableView<OrderInfo> historyOrdersTable;
    @FXML private TableColumn<OrderInfo, String> historyOrderTimeColumn;
    @FXML private TableColumn<OrderInfo, String> historyOrderInstrumentColumn;
    @FXML private TableColumn<OrderInfo, String> historyOrderDirectionColumn;
    @FXML private TableColumn<OrderInfo, String> historyOrderQuantityColumn;
    @FXML private TableColumn<OrderInfo, String> historyOrderPriceColumn;
    @FXML private TableColumn<OrderInfo, String> historyOrderStatusColumn;

    @FXML private TableView<TrackedPosition> positionsTable;
    @FXML private TableColumn<TrackedPosition, String> positionInstrumentColumn;
    @FXML private TableColumn<TrackedPosition, String> positionTypeColumn;
    @FXML private TableColumn<TrackedPosition, Long> positionQuantityColumn;
    @FXML private TableColumn<TrackedPosition, BigDecimal> positionEntryPriceColumn;
    @FXML private TableColumn<TrackedPosition, BigDecimal> positionCurrentPriceColumn;
    @FXML private TableColumn<TrackedPosition, BigDecimal> positionPnlPercentColumn;
    @FXML private TableColumn<TrackedPosition, BigDecimal> positionStopLossColumn;
    @FXML private TableColumn<TrackedPosition, BigDecimal> positionTakeProfitColumn;
    @FXML private TableColumn<TrackedPosition, Void> positionActionColumn;

    @FXML private TabPane instrumentTabPane; // <<-- –î–û–ë–ê–í–õ–ï–ù–û
    @FXML private ListView<TradableInstrument> favoriteInstrumentListView; // <<-- –î–û–ë–ê–í–õ–ï–ù–û
    @FXML private Button addToFavoritesButton; // <<-- –î–û–ë–ê–í–õ–ï–ù–û

    @FXML private ListView<String> strategyListView; // –ò–ó–ú–ï–ù–ï–ù–û: CheckListView -> ListView

    private final ObservableList<TrackedPosition> openPositions = FXCollections.observableArrayList();
    private final ObservableList<TradableInstrument> favoriteInstruments = FXCollections.observableArrayList(); // <<-- –î–û–ë–ê–í–õ–ï–ù–û

    private ScheduledExecutorService positionUpdateScheduler;

    private TinkoffApiConnector apiConnector;
    private SignalTracker signalTracker;
    private ApiUsageMonitor apiMonitor;
    private MultiStrategyManager multiStrategyManager; // <<-- –î–û–ë–ê–í–õ–ï–ù–û

    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    private final Map<String, InstrumentProcessor> activeProcessors = new ConcurrentHashMap<>();
    private final ObservableList<TradingSignal> tradingSignals = FXCollections.observableArrayList();

    private final ObservableList<OrderInfo> activeOrders = FXCollections.observableArrayList();
    private final ObservableList<OrderInfo> historyOrders = FXCollections.observableArrayList();

    private final ExecutorService backgroundExecutor = Executors.newCachedThreadPool(r -> {
        Thread t = new Thread(r, "Bot-Worker");
        t.setDaemon(true);
        return t;
    });

    private ScheduledExecutorService orderUpdateScheduler; // <<-- –î–û–ë–ê–í–õ–ï–ù–û
    private ScheduledFuture<?> orderUpdateFuture; // <<-- –î–û–ë–ê–í–õ–ï–ù–û

    @FXML
    public void initialize() {
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI...");
        connectButton.setDisable(false);
        startButton.setDisable(true);
        stopButton.setDisable(true);
        depositButton.setDisable(true);

        intervalChoiceBox.setItems(FXCollections.observableArrayList(
                CandleInterval.CANDLE_INTERVAL_1_MIN,
                CandleInterval.CANDLE_INTERVAL_5_MIN
        ));
        intervalChoiceBox.setValue(CandleInterval.CANDLE_INTERVAL_1_MIN);

        // <<-- –í–ê–ñ–ù–û: –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≤ ListView
        instrumentListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        // <<-- –î–û–ë–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        favoriteInstrumentListView.setItems(favoriteInstruments);
        favoriteInstrumentListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CheckListView –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: MultiStrategyManager —Ç—Ä–µ–±—É–µ—Ç BarSeries, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–ª—É—á–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ InstrumentProcessor.
        // –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.
        // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–µ–∑ BarSeries, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å MultiStrategyManager
        // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—É—Å—Ç—É—é BarSeries –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ä–∞–∑—É.

        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–¥–∏–º MultiStrategyManager —Å –ø—É—Å—Ç–æ–π BarSeries –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ getStrategyNames() –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö BarSeries.
        this.multiStrategyManager = new MultiStrategyManager(new BaseBarSeriesBuilder().withName("temp").build());
        strategyListView.setItems(FXCollections.observableArrayList(multiStrategyManager.getStrategyNames()));
        strategyListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        setupTableColumns();
        setupOrderTables();
        setupPositionsTable();
        orderUpdateScheduler = Executors.newSingleThreadScheduledExecutor(r -> {
            Thread t = new Thread(r, "Order-Updater");
            t.setDaemon(true);
            return t;
        });
        logger.info("‚úÖ UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
    }

    private void setupPositionsTable() {
        positionsTable.setItems(openPositions);

        positionInstrumentColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getTicker()));
        positionTypeColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().instrumentType()));
        positionQuantityColumn.setCellValueFactory(cellData -> new SimpleObjectProperty<>(cellData.getValue().quantity()));
        positionQuantityColumn.setCellFactory(column -> new TableCell<>() {
            @Override
            protected void updateItem(Long item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                    setStyle("");
                } else {
                    setText(String.valueOf(item));
                    if (item > 0) {
                        setStyle("-fx-text-fill: #2e7d32; -fx-font-weight: bold;"); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ª–æ–Ω–≥
                    } else if (item < 0) {
                        setStyle("-fx-text-fill: #c62828; -fx-font-weight: bold;"); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —à–æ—Ä—Ç
                    } else {
                        setStyle("");
                    }
                }
            }
        });

        positionEntryPriceColumn.setCellValueFactory(cellData -> new SimpleObjectProperty<>(cellData.getValue().averagePrice()));
        positionCurrentPriceColumn.setCellValueFactory(cellData -> new SimpleObjectProperty<>(cellData.getValue().currentPrice()));
        positionStopLossColumn.setCellValueFactory(cellData -> new SimpleObjectProperty<>(cellData.getValue().getStopLossPrice()));
        positionTakeProfitColumn.setCellValueFactory(cellData -> new SimpleObjectProperty<>(cellData.getValue().getTakeProfitPrice()));

        // –ö–∞—Å—Ç–æ–º–Ω–∞—è —è—á–µ–π–∫–∞ –¥–ª—è P/L –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        positionPnlPercentColumn.setCellValueFactory(cellData -> new SimpleObjectProperty<>(cellData.getValue().getProfitLossPercent()));
        positionPnlPercentColumn.setCellFactory(column -> new TableCell<>() {
            @Override
            protected void updateItem(BigDecimal item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                    setStyle("");
                } else {
                    setText(String.format("%.2f%%", item));
                    if (item.compareTo(BigDecimal.ZERO) > 0) {
                        setStyle("-fx-text-fill: #2e7d32; -fx-font-weight: bold;"); // –ó–µ–ª–µ–Ω—ã–π
                    } else if (item.compareTo(BigDecimal.ZERO) < 0) {
                        setStyle("-fx-text-fill: #c62828; -fx-font-weight: bold;"); // –ö—Ä–∞—Å–Ω—ã–π
                    } else {
                        setStyle("");
                    }
                }
            }
        });

        // –ö–∞—Å—Ç–æ–º–Ω–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
        positionActionColumn.setCellFactory(param -> new TableCell<>() {
            private final Button closeButton = new Button("–ó–∞–∫—Ä—ã—Ç—å");
            {
                closeButton.setOnAction(event -> {
                    TrackedPosition position = getTableView().getItems().get(getIndex());
                    handleClosePosition(position);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    // –û–±–µ—Ä—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ HBox –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                    HBox box = new HBox(closeButton);
                    box.setAlignment(Pos.CENTER);
                    setGraphic(box);
                }
            }
        });
    }

    private void setupTableColumns() {
        signalsTable.setItems(tradingSignals);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");

        // <<-- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        signalInstrumentColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getInstrument().name()));
        signalTimeColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getTimestamp().format(formatter)));
        signalTypeColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getSignalType().name()));
        signalScoreColumn.setCellValueFactory(cell -> new SimpleStringProperty(String.valueOf(cell.getValue().getScore())));
        signalPriceColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getEntryPrice() != null ? cell.getValue().getEntryPrice().toPlainString() : "N/A"));
    }

    private void setupOrderTables() {
        activeOrdersTable.setItems(activeOrders);
        historyOrdersTable.setItems(historyOrders);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");

        activeOrderTimeColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getTimestamp().format(formatter)));
        activeOrderInstrumentColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getInstrumentTicker()));
        activeOrderDirectionColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getDirection()));
        activeOrderQuantityColumn.setCellValueFactory(cell -> new SimpleStringProperty(String.valueOf(cell.getValue().getQuantity())));
        activeOrderPriceColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getAveragePrice().toPlainString()));
        activeOrderStatusColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getStatus()));

        historyOrderTimeColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getTimestamp().format(formatter)));
        historyOrderInstrumentColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getInstrumentTicker()));
        historyOrderDirectionColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getDirection()));
        historyOrderQuantityColumn.setCellValueFactory(cell -> new SimpleStringProperty(String.valueOf(cell.getValue().getQuantity())));
        historyOrderPriceColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getAveragePrice().toPlainString()));
        historyOrderStatusColumn.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue().getStatus()));
    }

    @FXML
    private void handleConnect() {
        String token = tokenField.getText();
        if (token == null || token.trim().isEmpty()) {
            log("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
            return;
        }

        log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...");
        connectButton.setDisable(true);

        backgroundExecutor.submit(() -> {
            try {
                this.apiConnector = new TinkoffApiConnector(token, true);
                this.apiMonitor = new ApiUsageMonitor();
                this.signalTracker = new SignalTracker();
                apiMonitor.recordConnect();

                boolean connected = apiConnector.connect().join();
                if (connected) {
                    Platform.runLater(() -> {
                        log("‚úÖ API —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!");
                        tokenField.setDisable(true);
                        startButton.setDisable(false);
                        depositButton.setDisable(false);
                        startOrderUpdates(); // <<-- –î–û–ë–ê–í–õ–ï–ù–û
                        startPositionUpdates();

                    });
                    loadInstruments();
                    fetchPortfolio();
                } else {
                    handleConnectionFailure();
                }
            } catch (Exception e) {
                handleCriticalError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏", e);
                Platform.runLater(() -> connectButton.setDisable(false));
            }
        });
    }

    private void loadInstruments() {
        backgroundExecutor.submit(() -> {
            try {
                Platform.runLater(() -> log("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."));
                List<TradableInstrument> instruments = apiConnector.getActiveInstruments();
                Platform.runLater(() -> updateInstrumentList(instruments));
            } catch (Exception e) {
                handleCriticalError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", e);
            }
        });
    }

    private void updateInstrumentList(List<TradableInstrument> instruments) {
        if (instruments.isEmpty()) {
            log("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.");
            startButton.setDisable(true);
            return;
        }
        instrumentListView.setItems(FXCollections.observableArrayList(instruments));
        log("‚úÖ –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å–∫'.");
    }

    @FXML
    private void handleAddToFavorites() {
        List<TradableInstrument> selectedForFavorites = instrumentListView.getSelectionModel().getSelectedItems();
        if (selectedForFavorites.isEmpty()) {
            log("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.");
            return;
        }

        int addedCount = 0;
        for (TradableInstrument instrument : selectedForFavorites) {
            if (!favoriteInstruments.contains(instrument)) {
                favoriteInstruments.add(instrument);
                addedCount++;
            }
        }
        if (addedCount > 0) {
            log(String.format("‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ %d –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç(–æ–≤) –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.", addedCount));
        } else {
            log("‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.");
        }
    }

    @FXML
    private void handleStart() {
        List<TradableInstrument> selectedInstruments;
        Tab selectedTab = instrumentTabPane.getSelectionModel().getSelectedItem();

        if ("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã".equals(selectedTab.getText())) {
            selectedInstruments = instrumentListView.getSelectionModel().getSelectedItems();
        } else if ("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ".equals(selectedTab.getText())) {
            selectedInstruments = favoriteInstrumentListView.getSelectionModel().getSelectedItems();
        } else {
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.");
            return;
        }

        if (selectedInstruments.isEmpty()) {
            log("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.");
            return;
        }

        log(String.format("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è %d –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...", selectedInstruments.size()));
        setTradingState(true);

        CandleInterval interval = intervalChoiceBox.getValue();
        Duration barDuration = getDurationFromInterval();

        List<String> selectedStrategies = strategyListView.getSelectionModel().getSelectedItems();
        if (selectedStrategies.isEmpty()) {
            log("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞.");
            setTradingState(false);
            return;
        }

        for (TradableInstrument instrument : selectedInstruments) {
            // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            InstrumentProcessor processor = new InstrumentProcessor(
                    instrument,
                    apiConnector,
                    signalTracker,
                    backgroundExecutor,
                    this::log, // –ü–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    tradingSignals, // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è UI
                    selectedStrategies // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            );
            activeProcessors.put(instrument.identifier(), processor);
            processor.start(interval, barDuration);
        }
    }

    @FXML
    private void handleStop() {
        log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...");
        activeProcessors.values().forEach(InstrumentProcessor::stop);
        activeProcessors.clear();
        stopOrderUpdates(); // <<-- –î–û–ë–ê–í–õ–ï–ù–û
        stopPositionUpdates();
        setTradingState(false);
        log("‚úÖ –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
    }

    private void startPositionUpdates() {
        positionUpdateScheduler = Executors.newSingleThreadScheduledExecutor(r -> {
            Thread t = new Thread(r, "Position-Updater");
            t.setDaemon(true);
            return t;
        });
        positionUpdateScheduler.scheduleAtFixedRate(this::updatePositions, 0, 15, TimeUnit.SECONDS);
        log("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π.");
    }

    private void stopPositionUpdates() {
        if (positionUpdateScheduler != null) {
            positionUpdateScheduler.shutdownNow();
        }
    }

    private void updatePositions() {
        if (apiConnector == null || !apiConnector.isConnected()) return;

        backgroundExecutor.submit(() -> {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ API
                Portfolio portfolio = apiConnector.getPortfolio().join();

                List<TrackedPosition> positions = portfolio.getPositions().stream()
                        .map(this::convertApiPositionToTrackedPosition)
                        .filter(java.util.Objects::nonNull) // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        .collect(Collectors.toList());

                Platform.runLater(() -> {
                    openPositions.setAll(positions);
                    log(String.format("üîÑ –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –û—Ç–∫—Ä—ã—Ç–æ: %d", openPositions.size()));
                });
            } catch (Exception e) {
                handleCriticalError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π", e);
            }
        });
    }

    private TrackedPosition convertApiPositionToTrackedPosition(Position apiPosition) {
        try {
            logger.debug("üîç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è API Position –¥–ª—è FIGI: {}", apiPosition.getFigi());
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            var instrument = apiConnector.getInstrumentByFigiSync(apiPosition.getFigi());

            String figi = apiPosition.getFigi();
            String ticker = instrument.getName(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            String instrumentType = convertInstrumentType(apiPosition.getInstrumentType()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            long quantity = apiPosition.getQuantityLots().longValue();
            BigDecimal averagePrice = TinkoffApiConnector.moneyToBigDecimal(apiPosition.getAveragePositionPrice());
            BigDecimal currentPrice = TinkoffApiConnector.moneyToBigDecimal(apiPosition.getCurrentPrice());
            String currency = apiPosition.getAveragePositionPrice().getCurrency().toUpperCase();

            // –ü–æ–ª—É—á–∞–µ–º Stop Loss –∏ Take Profit –∏–∑ SignalTracker
            SignalTracker.TrackedSignal trackedSignal = signalTracker.getTrackedSignal(figi);
            BigDecimal stopLoss = (trackedSignal != null) ? trackedSignal.getStopLossPrice() : BigDecimal.ZERO;
            BigDecimal takeProfit = (trackedSignal != null) ? trackedSignal.getTakeProfitPrice() : BigDecimal.ZERO;

            logger.debug("  FIGI: {}, Ticker: {}, Type: {}, Quantity: {}, AvgPrice: {}, CurrPrice: {}, Currency: {}, SL: {}, TP: {}",
                    figi, ticker, instrumentType, quantity, averagePrice, currentPrice, currency, stopLoss, takeProfit);

            return new TrackedPosition(
                    apiPosition,
                    stopLoss,
                    takeProfit,
                    ticker, // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–∫–µ—Ä
                    instrumentType // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            );
        } catch (Exception e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è FIGI: {}", apiPosition.getFigi(), e);
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
        }
    }

    private void handleClosePosition(TrackedPosition position) {
        log(String.format("‚è≥ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ %s...", position.getTicker()));

        backgroundExecutor.submit(() -> {
            try {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                OrderDirection directionToClose = position.quantity() > 0 ? OrderDirection.ORDER_DIRECTION_SELL : OrderDirection.ORDER_DIRECTION_BUY;
                long quantityToClose = Math.abs(position.quantity());

                apiConnector.closeMarketPosition(position.getFigi(), quantityToClose, directionToClose);

                Platform.runLater(() -> {
                    log(String.format("‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ %s (%d –ª–æ—Ç–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", position.getTicker(), quantityToClose));
                    fetchPortfolio(); // <<-- –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    updatePositions();
                });
            } catch (Exception e) {
                handleCriticalError("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ " + position.getTicker(), e);
            }
        });
    }

    private void startOrderUpdates() { // <<-- –î–û–ë–ê–í–õ–ï–ù–û
        if (orderUpdateFuture != null && !orderUpdateFuture.isDone()) {
            orderUpdateFuture.cancel(true);
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        orderUpdateFuture = orderUpdateScheduler.scheduleAtFixedRate(this::updateOrders, 0, 5, TimeUnit.SECONDS);
        log("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤.");
    }

    private void stopOrderUpdates() { // <<-- –î–û–ë–ê–í–õ–ï–ù–û
        if (orderUpdateFuture != null) {
            orderUpdateFuture.cancel(true);
            orderUpdateFuture = null;
            log("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
        }
    }

    private void updateOrders() { // <<-- –î–û–ë–ê–í–õ–ï–ù–û
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤."); // <<-- –î–û–ë–ê–í–õ–ï–ù–û
        if (apiConnector == null || !apiConnector.isConnected()) {
            log("‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤.");
            return;
        }
        backgroundExecutor.submit(() -> {
            try {
                logger.info("üîÑ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API."); // <<-- –î–û–ë–ê–í–õ–ï–ù–û
                List<OrderInfo> currentActiveOrders = apiConnector.getActiveOrders();
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç API.", currentActiveOrders.size()); // <<-- –î–û–ë–ê–í–õ–ï–ù–û

                Platform.runLater(() -> {
                    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é
                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    List<OrderInfo> toRemove = activeOrders.stream()
                            .filter(existingOrder -> currentActiveOrders.stream()
                                    .noneMatch(newOrder -> newOrder.getOrderId().equals(existingOrder.getOrderId())))
                            .collect(Collectors.toList());

                    for (OrderInfo removedOrder : toRemove) {
                        log("‚ÑπÔ∏è –û—Ä–¥–µ—Ä " + removedOrder.getOrderId() + " –±—ã–ª " + removedOrder.getStatus() + ", –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.");
                        activeOrders.remove(removedOrder);
                        if (!historyOrders.contains(removedOrder)) { // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                            historyOrders.add(removedOrder);
                        }
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    activeOrders.setAll(currentActiveOrders);
                    log(String.format("üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: %d. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö: %d", activeOrders.size(), historyOrders.size()));
                });

                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥)
                // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
                Instant now = Instant.now();
                logger.info("üîÑ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API."); // <<-- –î–û–ë–ê–í–õ–ï–ù–û
                List<OrderInfo> newHistoricalOperations = apiConnector.getHistoricalOrders(now.minus(1, TimeUnit.DAYS.toChronoUnit()), now);
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç API.", newHistoricalOperations.size()); // <<-- –î–û–ë–ê–í–õ–ï–ù–û
                Platform.runLater(() -> {
                    for (OrderInfo histOrder : newHistoricalOperations) {
                        if (!historyOrders.contains(histOrder) &&
                            activeOrders.stream().noneMatch(active -> active.getOrderId().equals(histOrder.getOrderId()))) {
                            historyOrders.add(histOrder);
                        }
                    }
                });

            } catch (Exception e) {
                handleCriticalError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤", e);
            }
        });
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (handleDeposit, fetchPortfolio, –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
    // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç –æ–±—â–∏–º–∏ –≤–µ—â–∞–º–∏ (—Å—á–µ—Ç, –±–∞–ª–∞–Ω—Å).

    @FXML
    private void handleDeposit() {
        // –ö–æ–¥ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        String amountText = depositAmountField.getText();
        try {
            BigDecimal amount = new BigDecimal(amountText);
            if (amount.compareTo(BigDecimal.ZERO) <= 0) {
                log("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
                return;
            }

            log("‚è≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ " + amount.toPlainString() + " RUB...");
            depositButton.setDisable(true);
            backgroundExecutor.submit(() -> {
                try {
                    apiConnector.payInSandbox(amount);
                    log("‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!");
                    fetchPortfolio();
                } catch (Exception e) {
                    handleCriticalError("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", e);
                } finally {
                    Platform.runLater(() -> depositButton.setDisable(false));
                }
            });
        } catch (NumberFormatException e) {
            log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.");
        }
    }

    private void fetchPortfolio() {
        if (apiConnector == null) return;
        apiMonitor.recordPortfolio();
        try {
            Portfolio portfolioResponse = apiConnector.getPortfolio().join();
            Platform.runLater(() -> {
                BigDecimal totalValue = calculatePortfolioTotalValue(portfolioResponse);
                balanceLabel.setText(String.format("%,.2f RUB", totalValue));
                log("üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: " + balanceLabel.getText());
            });
        } catch (Exception e) {
            handleCriticalError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è", e);
        }
    }

    private BigDecimal calculatePortfolioTotalValue(Portfolio portfolio) {
        if (portfolio == null) return BigDecimal.ZERO;
        BigDecimal positionsValue = portfolio.getPositions().stream()
                .map(p -> p.getQuantity().multiply(p.getCurrentPrice().getValue()))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        return positionsValue.add(portfolio.getTotalAmountCurrencies().getValue());
    }

    private Duration getDurationFromInterval() {
        return Duration.ofMinutes(intervalChoiceBox.getValue().getNumber());
    }

    private void setTradingState(boolean isTrading) {
        Platform.runLater(() -> {
            startButton.setDisable(isTrading);
            stopButton.setDisable(!isTrading);
            depositButton.setDisable(isTrading);
            instrumentListView.setDisable(isTrading);
            intervalChoiceBox.setDisable(isTrading);
        });
    }

    private void handleConnectionFailure() {
        Platform.runLater(() -> {
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.");
            connectButton.setDisable(false);
        });
    }

    private void handleCriticalError(String message, Throwable e) {
        logger.error(message, e);
        Platform.runLater(() -> log("üí• –û—à–∏–±–∫–∞: " + message + ". –°–º. –ª–æ–≥–∏."));
    }

    private String convertInstrumentType(String apiInstrumentType) {
        String result;
        switch (apiInstrumentType) {
            case "SHARE":
                result = "–ê–∫—Ü–∏—è";
                break;
            case "FUTURES":
                result = "–§—å—é—á–µ—Ä—Å";
                break;
            case "CURRENCY":
                result = "–í–∞–ª—é—Ç–∞";
                break;
            case "ETF":
                result = "ETF";
                break;
            case "BOND":
                result = "–û–±–ª–∏–≥–∞—Ü–∏—è";
                break;
            default:
                result = apiInstrumentType;
                break;
        }
        return result;
    }

    private void log(String message) {
        Platform.runLater(() -> {
            String timeStamp = LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            logTextArea.appendText(timeStamp + " - " + message + "\n");
        });
        if (!message.startsWith("üìà")) { // –ß—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏ —á–∞—Å—Ç—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å–≤–µ—á–µ–π
            logger.info(message);
        }
    }
}
