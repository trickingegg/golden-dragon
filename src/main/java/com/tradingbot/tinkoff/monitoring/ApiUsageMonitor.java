package com.tradingbot.tinkoff.monitoring;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Tinkoff API
 */
public class ApiUsageMonitor {
    private static final Logger logger = LoggerFactory.getLogger(ApiUsageMonitor.class);

    // –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    private final AtomicLong totalRequests = new AtomicLong(0);
    private final AtomicLong connectRequests = new AtomicLong(0);
    private final AtomicLong portfolioRequests = new AtomicLong(0);
    private final AtomicLong marketDataRequests = new AtomicLong(0);
    private final AtomicLong instrumentRequests = new AtomicLong(0);

    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    private final AtomicReference<LocalDateTime> lastReset = new AtomicReference<>(LocalDateTime.now());

    public void recordConnect() {
        connectRequests.incrementAndGet();
        totalRequests.incrementAndGet();
        logger.debug("API –∑–∞–ø—Ä–æ—Å: Connect. –í—Å–µ–≥–æ: {}", totalRequests.get());
    }

    public void recordPortfolio() {
        portfolioRequests.incrementAndGet();
        totalRequests.incrementAndGet();
        logger.debug("API –∑–∞–ø—Ä–æ—Å: Portfolio. –í—Å–µ–≥–æ: {}", totalRequests.get());
    }

    public void recordMarketData() {
        marketDataRequests.incrementAndGet();
        totalRequests.incrementAndGet();
        logger.debug("API –∑–∞–ø—Ä–æ—Å: MarketData. –í—Å–µ–≥–æ: {}", totalRequests.get());
    }

    public void recordInstrument() {
        instrumentRequests.incrementAndGet();
        totalRequests.incrementAndGet();
        logger.debug("API –∑–∞–ø—Ä–æ—Å: Instrument. –í—Å–µ–≥–æ: {}", totalRequests.get());
    }

    public void printUsageStatistics() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime resetTime = lastReset.get();
        long hoursElapsed = java.time.Duration.between(resetTime, now).toHours();

        logger.info("=== üì° –°–¢–ê–¢–ò–°–¢–ò–ö–ê API –ó–ê–ü–†–û–°–û–í ===");
        logger.info("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", totalRequests.get());
        logger.info("Connect: {}", connectRequests.get());
        logger.info("Portfolio: {}", portfolioRequests.get());
        logger.info("MarketData: {}", marketDataRequests.get());
        logger.info("Instrument: {}", instrumentRequests.get());
        logger.info("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} —á–∞—Å–æ–≤", hoursElapsed);

        if (hoursElapsed > 0) {
            logger.info("–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {}", totalRequests.get() / hoursElapsed);
        }

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö
        long requestsPerHour = hoursElapsed > 0 ? totalRequests.get() / hoursElapsed : totalRequests.get();
        if (requestsPerHour > 100) {
            logger.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ ({}/—á–∞—Å). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 100/—á–∞—Å", requestsPerHour);
        }

        logger.info("================================");
    }

    public void reset() {
        totalRequests.set(0);
        connectRequests.set(0);
        portfolioRequests.set(0);
        marketDataRequests.set(0);
        instrumentRequests.set(0);
        lastReset.set(LocalDateTime.now());
        logger.info("üîÑ –°—á–µ—Ç—á–∏–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã");
    }
}
