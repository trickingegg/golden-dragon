package com.tradingbot.tinkoff.api;

import com.tradingbot.tinkoff.model.TradableInstrument;
import com.tradingbot.tinkoff.model.OrderInfo;
import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.tinkoff.piapi.contract.v1.*;
import ru.tinkoff.piapi.core.InvestApi;
import ru.tinkoff.piapi.core.stream.MarketDataSubscriptionService;
import ru.tinkoff.piapi.core.stream.StreamProcessor;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.function.Consumer;
import java.util.Comparator;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.time.temporal.ChronoUnit;
import ru.tinkoff.piapi.contract.v1.GetFuturesMarginResponse;

import java.net.InetAddress;
import java.net.Socket;
import java.net.InetSocketAddress;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è Tinkoff Invest API v2 (SDK 1.32+)
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Å—Ç—Ä–∏–º–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
 * –° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
 */
public class TinkoffApiConnector {
    private static final Logger logger = LoggerFactory.getLogger(TinkoffApiConnector.class);

    private final InvestApi api;
    private final ExecutorService executorService;
    private final boolean sandboxMode;

    /**
     * -- GETTER --
     *  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    @Getter
    private volatile boolean isConnected = false;

    /**
     * -- GETTER --
     *  –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    @Getter
    private String accountId;


    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤).
     * @return –°–ø–∏—Å–æ–∫ `TradableInstrument`, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI.
     */
    public List<TradableInstrument> getActiveInstruments() {
        logger.info("üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤...");

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ü–∏–∏
        Stream<TradableInstrument> sharesStream = api.getInstrumentsService().getShares(InstrumentStatus.INSTRUMENT_STATUS_BASE)
                .join().stream()
                .filter(s -> s.getTradingStatus() == SecurityTradingStatus.SECURITY_TRADING_STATUS_NORMAL_TRADING && s.getApiTradeAvailableFlag())
                .map(s -> new TradableInstrument(s.getName() + " (–ê–∫—Ü–∏—è)", s.getFigi(), TradableInstrument.InstrumentType.STOCK, s.getCurrency()));

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã (–∏ —Å—Ä–æ—á–Ω—ã–µ, –∏ –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ)
        Stream<TradableInstrument> futuresStream = api.getInstrumentsService().getFutures(InstrumentStatus.INSTRUMENT_STATUS_ALL)
                .join().stream()
                .filter(f -> f.getTradingStatus() == SecurityTradingStatus.SECURITY_TRADING_STATUS_NORMAL_TRADING && f.getApiTradeAvailableFlag())
                .map(f -> new TradableInstrument(f.getName() + " (–§—å—é—á–µ—Ä—Å)", f.getFigi(), TradableInstrument.InstrumentType.FUTURE, f.getCurrency()));

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ –ø–æ—Ç–æ–∫–∞ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        List<TradableInstrument> allInstruments = Stream.concat(sharesStream, futuresStream)
                .sorted(Comparator.comparing(TradableInstrument::name)) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                .collect(Collectors.toList());

        logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.", allInstruments.size());
        return allInstruments;
    }
    public TinkoffApiConnector(String token, boolean sandboxMode) {
        this.sandboxMode = sandboxMode;

        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            System.setProperty("java.net.preferIPv4Stack", "true");
            System.setProperty("java.net.preferIPv6Addresses", "false");
            System.setProperty("io.grpc.netty.useCustomAllocator", "false");
            System.setProperty("io.grpc.internal.DnsNameResolverProvider.enable_grpclb", "false");
            System.setProperty("io.netty.resolver.dns.preferIPv4", "true");
            System.setProperty("io.netty.resolver.dns.preferIPv6", "false");
            System.setProperty("io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder.maxInboundMessageSize", "1048576");

            logger.info("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");

            // –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            if (sandboxMode) {
                this.api = InvestApi.createSandbox(token);
            } else {
                this.api = InvestApi.create(token);
            }

            this.executorService = Executors.newCachedThreadPool(r -> {
                Thread t = new Thread(r);
                t.setDaemon(true);
                t.setName("TinkoffAPI-" + Thread.currentThread().getName());
                return t;
            });

            logger.info("‚úÖ TinkoffApiConnector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. Sandbox —Ä–µ–∂–∏–º: {}", sandboxMode);

        } catch (Exception e) {
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API", e);
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä: " + e.getMessage(), e);
        }
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã.
     * @param figi FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
     * @param days –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
     * @param interval –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π.
     * @return –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π.
     */
    public List<HistoricCandle> getHistoricCandles(String figi, int days, CandleInterval interval) {
        logger.info("üïØÔ∏è –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è FIGI {} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {} –¥–Ω–µ–π...", figi, days);
        List<HistoricCandle> allCandles = new ArrayList<>();
        Instant now = Instant.now();

        // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API, –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –¥–Ω—é
        for (int i = 0; i < days; i++) {
            Instant from = now.minus(i + 1, ChronoUnit.DAYS);
            Instant to = now.minus(i, ChronoUnit.DAYS);

            try {
                logger.debug("–ó–∞–ø—Ä–æ—Å —á–∞—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å {} –ø–æ {}", from, to);
                List<HistoricCandle> batch = api.getMarketDataService().getCandles(figi, from, to, interval).join();
                allCandles.addAll(batch);

                // –ù–µ–±–æ–ª—å—à–∞—è –≤–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ (rate limiting)
                Thread.sleep(250); // 4 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É - –±–µ–∑–æ–ø–∞—Å–Ω–æ
            } catch (Exception e) {
                // –ï—Å–ª–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ –¥–Ω—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã—Ö–æ–¥–Ω–æ–π), –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ ({} - {}): {}", from, to, e.getMessage());
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏–π—Ç–∏ –Ω–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
        allCandles.sort(Comparator.comparing(c -> TinkoffApiConnector.timestampToInstant(c.getTime())));
        logger.info("‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π.", allCandles.size());
        return allCandles;
    }

    /**
     * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É.
     * @param amount –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö.
     */
    public void payInSandbox(BigDecimal amount) {
        if (!sandboxMode || accountId == null) {
            throw new IllegalStateException("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.");
        }
        api.getSandboxService().payInSync(accountId, MoneyValue.newBuilder()
                .setCurrency("rub")
                .setUnits(amount.longValue())
                //.setNano(amount.remainder(BigDecimal.ONE).multiply(new BigDecimal("1000000000")).intValue())
                .build());
    }

    public ru.tinkoff.piapi.contract.v1.PostOrderResponse postMarketOrder(String figi, long quantity, OrderDirection direction) {
        String orderId = UUID.randomUUID().toString(); // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å

        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π Quotation –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞, –≥–¥–µ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
        Quotation emptyQuotation = Quotation.newBuilder().setUnits(0).setNano(0).build();

        // –î–ª—è sandbox-—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        if (sandboxMode) {
            return api.getSandboxService().postOrderSync(figi, quantity, emptyQuotation, direction, accountId, OrderType.ORDER_TYPE_MARKET, orderId);
        } else {
            // –î–ª—è –±–æ–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ - —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            return api.getOrdersService().postOrderSync(figi, quantity, emptyQuotation, direction, accountId, OrderType.ORDER_TYPE_MARKET, orderId);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ –µ–≥–æ FIGI.
     * @param figi FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
     * @return –û–±—ä–µ–∫—Ç Instrument.
     */
    public Instrument getInstrumentByFigiSync(String figi) {
        if (!isConnected()) {
            throw new IllegalStateException("API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.");
        }
        return api.getInstrumentsService().getInstrumentByFigiSync(figi);
    }

    public String postStopOrder(String instrumentId, long quantity, Quotation stopPrice, StopOrderDirection direction, StopOrderType type) {
        // ID –æ—Ä–¥–µ—Ä–∞
        //String stopOrderId = UUID.randomUUID().toString(); // <<-- –£–î–ê–õ–ï–ù–û: –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

        // –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è - 1 –¥–µ–Ω—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        Instant expireDate = Instant.now().plus(1, ChronoUnit.DAYS);

        if (sandboxMode) {
            // –í SandboxService –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ postStopOrderGoodTillDateSync. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º.
            // return api.getSandboxService().postStopOrderGoodTillDateSync(instrumentId, quantity, stopPrice, stopPrice, direction, accountId, type, expireDate);
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
        } else {
            return api.getStopOrdersService().postStopOrderGoodTillDateSync(instrumentId, quantity, stopPrice, stopPrice, direction, accountId, type, expireDate);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
     * @return –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {@link OrderInfo}.
     */
    public List<OrderInfo> getActiveOrders() {
        logger.info("üìã –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {}", accountId);
        List<OrderState> apiOrders;
        if (sandboxMode) {
            apiOrders = api.getSandboxService().getOrders(accountId).join();
        } else {
            apiOrders = api.getOrdersService().getOrders(accountId).join();
        }

        List<OrderInfo> activeOrders = apiOrders.stream()
                .filter(order -> order.getExecutionReportStatus() == OrderExecutionReportStatus.EXECUTION_REPORT_STATUS_NEW) // <<-- –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ
                .map(this::mapOrderStateToOrderInfo)
                .collect(Collectors.toList());

        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.", activeOrders.size());
        return activeOrders;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ —Ç.–¥.) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
     * –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç API Tinkoff –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
     * –∫–∞–∫ —Ç–∞–∫–æ–≤—ã—Ö, –ø–æ—ç—Ç–æ–º—É –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É "—Å–¥–µ–ª–∫–∞".
     *
     * @param from –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏.
     * @param to –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏.
     * @return –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {@link OrderInfo}.
     */
    public List<OrderInfo> getHistoricalOrders(Instant from, Instant to) {
        logger.info("üìú –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {} —Å {} –ø–æ {}", accountId, from, to);
        List<ru.tinkoff.piapi.contract.v1.Operation> operations;
        if (sandboxMode) {
            operations = api.getSandboxService().getOperations(accountId, from, to, ru.tinkoff.piapi.contract.v1.OperationState.OPERATION_STATE_EXECUTED, null).join(); // –î–ª—è SandboxService –æ—Å—Ç–∞–≤–ª—è–µ–º state –∏ figi
        } else {
            operations = api.getOperationsService().getExecutedOperations(accountId, from, to).join(); // <<-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º getExecutedOperations
        }

        List<OrderInfo> historicalOrders = operations.stream()
                .filter(op -> !op.getId().isEmpty()) // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–¥–∞–ª–µ–Ω hasId(), –∏—Å–ø–æ–ª—å–∑—É–µ–º getId().isEmpty()
                .map(op -> {
                    // –î–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤, –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Operation
                    // –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π OrderInfo –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–¥–µ–ª–∫–∏.
                    String orderId = op.getId();
                    String instrumentTicker = op.getFigi();
                    String direction = op.getOperationType().name();
                    long quantity = op.getQuantity();
                    BigDecimal averagePrice = moneyValueToBigDecimal(op.getPrice());
                    String status = "FILLED";
                    LocalDateTime timestamp = timestampToLocalDateTime(op.getDate());

                    return new OrderInfo(orderId, instrumentTicker, direction, quantity, averagePrice, status, timestamp);
                })
                .collect(Collectors.toList());

        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤.", historicalOrders.size());
        return historicalOrders;
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ OrderState –≤ OrderInfo
     */
    private OrderInfo mapOrderStateToOrderInfo(OrderState orderState) {
        String instrumentTicker = orderState.getFigi(); // TODO: –†–∞–∑—Ä–µ—à–∏—Ç—å FIGI –≤ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        String direction = orderState.getDirection() == OrderDirection.ORDER_DIRECTION_BUY ? "BUY" : "SELL";
        long quantity = orderState.getLotsRequested() - orderState.getLotsExecuted(); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        BigDecimal averagePrice = moneyValueToBigDecimal(orderState.getAveragePositionPrice());
        String status = orderState.getExecutionReportStatus().name();
        LocalDateTime timestamp = timestampToLocalDateTime(orderState.getOrderDate());

        return new OrderInfo(orderState.getOrderId(), instrumentTicker, direction, quantity, averagePrice, status, timestamp);
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    public CompletableFuture<Boolean> connect() {
        return CompletableFuture.supplyAsync(() -> {
            int maxAttempts = 5;
            long baseDelay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

            for (int attempt = 1; attempt <= maxAttempts; attempt++) {
                try {
                    logger.info("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #{}/{} –∫ Tinkoff API (sandbox={})...",
                            attempt, maxAttempts, sandboxMode);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º API
                    testNetworkConnectivity();

                    if (sandboxMode) {
                        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º sandbox –∞–∫–∫–∞—É–Ω—Ç
                        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ sandbox –∞–∫–∫–∞—É–Ω—Ç–æ–≤...");
                        List<Account> accountsResponse = api.getSandboxService().getAccountsSync();

                        if (accountsResponse.isEmpty()) {
                            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ sandbox –∞–∫–∫–∞—É–Ω—Ç–∞...");
                            this.accountId = api.getSandboxService().openAccountSync();
                            logger.info("‚úÖ Sandbox –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {}", accountId);
                        } else {
                            this.accountId = accountsResponse.get(0).getId();
                            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π sandbox –∞–∫–∫–∞—É–Ω—Ç: {}", accountId);
                        }

                        // –ü–æ–ø–æ–ª–Ω—è–µ–º sandbox –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//                        api.getSandboxService().payInSync(accountId,
//                                MapperUtils.bigDecimalToMoneyValue(BigDecimal.valueOf(1_000_000), "rub"));
//                        logger.info("üí∞ Sandbox –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 1,000,000 RUB");

                    } else {
                        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...");
                        List<Account> accountsResponse = api.getUserService().getAccountsSync();

                        if (accountsResponse.isEmpty()) {
                            throw new RuntimeException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤");
                        }

                        this.accountId = accountsResponse.get(0).getId();
                        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç: {}", accountId);
                    }

                    isConnected = true;
                    logger.info("üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ #{}", attempt);
                    return true;

                } catch (Exception e) {
                    logger.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ #{} –Ω–µ—É–¥–∞—á–Ω–∞: {} ({})",
                            attempt, e.getClass().getSimpleName(), e.getMessage());

                    if (e.getCause() instanceof java.nio.channels.UnsupportedAddressTypeException) {
                        logger.error("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ DNS/—Å–æ–∫–µ—Ç–æ–≤");
                    }

                    if (attempt == maxAttempts) {
                        logger.error("üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã");
                        isConnected = false;
                        return false;
                    }

                    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    long delay = baseDelay * (long)Math.pow(2, attempt - 1);
                    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {} –º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...", delay);

                    try {
                        Thread.sleep(delay);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        logger.error("‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è");
                        return false;
                    }
                }
            }

            return false;
        }, executorService);
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π (–±–ª–∏–∂–∞–π—à–∏–π –ø–æ –¥–∞—Ç–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏) —Ç–æ—Ä–≥—É–µ–º—ã–π —Ñ—å—é—á–µ—Ä—Å.
     * @param baseAssetTicker –¢–∏–∫–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Si", "RI", "SBER").
     * @return FIGI –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ñ—å—é—á–µ—Ä—Å–∞.
     */
    public String findActiveFutureFigi(String baseAssetTicker) {
        logger.info("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞: {}", baseAssetTicker);
        List<Future> futures = api.getInstrumentsService().getFuturesSync(InstrumentStatus.INSTRUMENT_STATUS_ALL);

        return futures.stream()
                // –ò—â–µ–º –ø–æ —Ç–∏–∫–µ—Ä—É –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                .filter(future -> future.getBasicAsset().equalsIgnoreCase(baseAssetTicker))
                // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–µ–π—á–∞—Å —Ç–æ—Ä–≥—É—é—Ç—Å—è
                .filter(future -> future.getTradingStatus() == SecurityTradingStatus.SECURITY_TRADING_STATUS_NORMAL_TRADING)
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –¥–∞—Ç–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
                .min(Comparator.comparing(future -> timestampToInstant(future.getExpirationDate())))
                .map(Future::getFigi) // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Future
                .orElseThrow(() -> new RuntimeException("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è " + baseAssetTicker));
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    private void testNetworkConnectivity() {
        try {
            logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DNS
            InetAddress.getByName("invest-public-api.tinkoff.ru");
            logger.info("‚úÖ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            try (Socket socket = new Socket()) {
                socket.connect(new InetSocketAddress("invest-public-api.tinkoff.ru", 443), 5000);
                logger.info("‚úÖ –ü–æ—Ä—Ç 443 –¥–æ—Å—Ç—É–ø–µ–Ω");
            }

        } catch (Exception e) {
            logger.warn("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º: {}", e.getMessage());
            throw new RuntimeException("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public CompletableFuture<ru.tinkoff.piapi.core.models.Portfolio> getPortfolio() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (!isConnected || accountId == null) {
                    throw new RuntimeException("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞");
                }

                ru.tinkoff.piapi.core.models.Portfolio portfolio;
                if (sandboxMode) {
                    PortfolioResponse portfolioResponse = api.getSandboxService().getPortfolio(accountId).join();
                    portfolio = ru.tinkoff.piapi.core.models.Portfolio.fromResponse(portfolioResponse);
                } else {
                    portfolio = api.getOperationsService().getPortfolio(accountId).join();
                }

                logger.info("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—É—á–µ–Ω. –ü–æ–∑–∏—Ü–∏–π: {}", portfolio.getPositions().size());
                return portfolio;

            } catch (Exception e) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è", e);
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å", e);
            }
        }, executorService);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º.
     *
     * @param figi FIGI —Ñ—å—é—á–µ—Ä—Å–∞.
     * @return –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏.
     */
    public CompletableFuture<GetFuturesMarginResponse> getFuturesMarginResponse(String figi) {
        return api.getInstrumentsService().getFuturesMargin(figi);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    public MarketDataSubscriptionService subscribeToMarketData(List<String> figiList, CandleInterval interval,
                                                               Consumer<Candle> candleConsumer,
                                                               Consumer<OrderBook> orderBookConsumer,
                                                               int orderBookDepth) {
        if (!isConnected || accountId == null) {
            logger.error("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
            return null;
        }

        logger.info("üìà –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è FIGI: {}", String.join(", ", figiList));

        // –°–æ–∑–¥–∞–µ–º StreamProcessor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ MarketDataResponse
        StreamProcessor<MarketDataResponse> processor = response -> {
            if (response.hasCandle() && candleConsumer != null) {
                candleConsumer.accept(response.getCandle());
            } else if (response.hasOrderbook() && orderBookConsumer != null) {
                orderBookConsumer.accept(response.getOrderbook());
            }
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        };

        Consumer<Throwable> onErrorCallback = throwable -> logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∏–º–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", throwable);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        MarketDataSubscriptionService marketDataStream = api.getMarketDataStreamService().newStream(
                "market_data_stream_" + System.currentTimeMillis(),
                processor, onErrorCallback);

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–≤–µ—á–∏
        if (candleConsumer != null) {
            marketDataStream.subscribeCandles(figiList, mapCandleIntervalToSubscriptionInterval(interval)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        }

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω—ã
        if (orderBookConsumer != null) {
            marketDataStream.subscribeOrderbook(figiList, orderBookDepth);
        }

        logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã");
        return marketDataStream;
    }

    public PostOrderResponse closeMarketPosition(String figi, long quantity, OrderDirection direction) {
        if (!isConnected()) {
            throw new IllegalStateException("API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.");
        }
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ postMarketOrder
        return postMarketOrder(figi, quantity, direction);
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è CandleInterval –≤ SubscriptionInterval
     */
    private SubscriptionInterval mapCandleIntervalToSubscriptionInterval(CandleInterval candleInterval) {
        switch (candleInterval) {
            case CANDLE_INTERVAL_1_MIN: return SubscriptionInterval.SUBSCRIPTION_INTERVAL_ONE_MINUTE;
            case CANDLE_INTERVAL_5_MIN: return SubscriptionInterval.SUBSCRIPTION_INTERVAL_FIVE_MINUTES;
            // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            default: return SubscriptionInterval.SUBSCRIPTION_INTERVAL_UNSPECIFIED;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
     */
    public CompletableFuture<Instrument> getInstrumentByFigi(String figi) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                var instrument = api.getInstrumentsService().getInstrumentByFigiSync(figi);
                return instrument;
            } catch (Exception e) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}", figi, e);
                throw new RuntimeException(e);
            }
        }, executorService);
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç API
     */
    public void disconnect() {
        try {
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç API...");

            if (api != null) {
                api.destroy(3);
            }

            if (executorService != null && !executorService.isShutdown()) {
                executorService.shutdownNow();
            }

            isConnected = false;
            logger.info("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏", e);
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MoneyValue –≤ BigDecimal
     */
    public static BigDecimal moneyValueToBigDecimal(MoneyValue moneyValue) {
        if (moneyValue == null) {
            return BigDecimal.ZERO;
        }
        return BigDecimal.valueOf(moneyValue.getUnits())
                .add(BigDecimal.valueOf(moneyValue.getNano(), 9));
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Money (–∏–∑ core.models) –≤ BigDecimal
     */
    public static BigDecimal moneyToBigDecimal(ru.tinkoff.piapi.core.models.Money money) {
        if (money == null) {
            return BigDecimal.ZERO;
        }
        return money.getValue();
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Quotation –≤ BigDecimal
     */
    public static BigDecimal quotationToBigDecimal(Quotation quotation) {
        if (quotation == null) {
            return BigDecimal.ZERO;
        }
        return BigDecimal.valueOf(quotation.getUnits())
                .add(BigDecimal.valueOf(quotation.getNano(), 9));
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Timestamp –≤ Instant
     */
    public static Instant timestampToInstant(com.google.protobuf.Timestamp timestamp) {
        return Instant.ofEpochSecond(timestamp.getSeconds(), timestamp.getNanos());
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Timestamp –≤ LocalDateTime
     */
    public static LocalDateTime timestampToLocalDateTime(com.google.protobuf.Timestamp timestamp) {
        return LocalDateTime.ofInstant(timestampToInstant(timestamp), ZoneOffset.UTC);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BigDecimal –≤ Quotation
     */
    public static Quotation bigDecimalToQuotation(BigDecimal value) {
        if (value == null) {
            return Quotation.newBuilder().setUnits(0).setNano(0).build();
        }
        long units = value.longValue();
        int nano = value.remainder(BigDecimal.ONE).movePointRight(9).intValue();
        return Quotation.newBuilder().setUnits(units).setNano(nano).build();
    }
}