package com.tradingbot.tinkoff.processor;

import com.tradingbot.tinkoff.api.TinkoffApiConnector;
import com.tradingbot.tinkoff.model.TradableInstrument;
import com.tradingbot.tinkoff.model.TradingSignal;
import com.tradingbot.tinkoff.risk.RiskManager;
import com.tradingbot.tinkoff.strategy.MultiStrategyManager;
import com.tradingbot.tinkoff.tracking.SignalTracker;
import javafx.collections.ObservableList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.ta4j.core.BarSeries;
import org.ta4j.core.BaseBar;
import org.ta4j.core.BaseBarSeriesBuilder;
import org.ta4j.core.num.DecimalNum;
import ru.tinkoff.piapi.contract.v1.*;
import ru.tinkoff.piapi.core.stream.MarketDataSubscriptionService;

import java.math.BigDecimal;
import java.time.Duration;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.*;
import java.util.function.Consumer;
import java.util.Map;
import java.util.HashMap;

/**
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é —Å–µ—Ä–∏—é –±–∞—Ä–æ–≤, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫.
 */
public class InstrumentProcessor {
    private static final Logger logger = LoggerFactory.getLogger(InstrumentProcessor.class);
    private static final long SIGNAL_COOLDOWN_SECONDS = 60;

    private final TradableInstrument instrument;
    private final TinkoffApiConnector apiConnector;
    private final SignalTracker signalTracker;
    private final BarSeries barSeries;
    private final MultiStrategyManager strategyManager;
    private final RiskManager riskManager;
    private final ExecutorService backgroundExecutor;

    // UI-–∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ
    private final Consumer<String> loggerCallback;
    private final ObservableList<TradingSignal> signalsList;

    private MarketDataSubscriptionService marketDataSubscription;
    private ScheduledExecutorService strategyExecutor;
    private Instant lastSignalTimestamp;

    public InstrumentProcessor(TradableInstrument instrument,
                               TinkoffApiConnector apiConnector,
                               SignalTracker signalTracker,
                               ExecutorService backgroundExecutor,
                               Consumer<String> loggerCallback,
                               ObservableList<TradingSignal> signalsList,
                               List<String> enabledStrategies) {
        this.instrument = instrument;
        this.apiConnector = apiConnector;
        this.signalTracker = signalTracker;
        this.backgroundExecutor = backgroundExecutor;
        this.loggerCallback = loggerCallback;
        this.signalsList = signalsList;

        this.barSeries = new BaseBarSeriesBuilder().withName(instrument.identifier()).build();
        this.strategyManager = new MultiStrategyManager(barSeries, enabledStrategies);
        this.riskManager = new RiskManager(
                new BigDecimal("1.0"), // 1% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
                new BigDecimal("1000"), // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 1000 RUB
                new BigDecimal("20.0"), // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 20%
                new BigDecimal("0.5"), // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ 0.5%
                new BigDecimal("0.001"), // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1%)
                apiConnector // –ü–µ—Ä–µ–¥–∞–µ–º TinkoffApiConnector
        );
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ.
     * @param interval –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π.
     */
    public void start(CandleInterval interval, Duration barDuration) {
        log(String.format("üöÄ [%s] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...", instrument.name()));
        this.strategyExecutor = Executors.newSingleThreadScheduledExecutor(r -> {
            Thread t = new Thread(r, "Processor-" + instrument.name());
            t.setDaemon(true);
            return t;
        });

        backgroundExecutor.submit(() -> {
            try {
                int requiredBars = strategyManager.getUnstablePeriod();
                log(String.format("‚è≥ [%s] –¢—Ä–µ–±—É–µ—Ç—Å—è %d –±–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...", instrument.name(), requiredBars));

                List<HistoricCandle> historicCandles = apiConnector.getHistoricCandles(instrument.identifier(), 7, interval);
                historicCandles.forEach(candle -> addCandleToSeries(candle, barDuration));
                log(String.format("‚úÖ [%s] –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ë–∞—Ä–æ–≤ –≤ —Å–µ—Ä–∏–∏: %d.", instrument.name(), barSeries.getBarCount()));

                subscribeToMarketData(interval, barDuration);
                startStrategyAnalysisScheduler();
            } catch (Exception e) {
                handleCriticalError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", e);
            }
        });
    }

    /**
     * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.
     */
    public void stop() {
        if (strategyExecutor != null) {
            strategyExecutor.shutdownNow();
        }
        if (marketDataSubscription != null) {
            marketDataSubscription.cancel();
        }
        log(String.format("üõë [%s] –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", instrument.name()));
    }

    private void subscribeToMarketData(CandleInterval interval, Duration barDuration) {
        this.marketDataSubscription = apiConnector.subscribeToMarketData(
                Collections.singletonList(instrument.identifier()),
                interval,
                candle -> processCandleEvent(candle, barDuration),
                null,
                0
        );
        log(String.format("üìä [%s] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–∞.", instrument.name()));
    }

    private void startStrategyAnalysisScheduler() {
        strategyExecutor.scheduleAtFixedRate(this::runStrategyAnalysis, 15, 10, TimeUnit.SECONDS);
        log(String.format("üß† [%s] –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–ø—É—â–µ–Ω.", instrument.name()));
    }

    private void processCandleEvent(Candle candle, Duration barDuration) {
        if (candle == null) return;
        try {
            ZonedDateTime zdt = ZonedDateTime.ofInstant(TinkoffApiConnector.timestampToInstant(candle.getTime()), ZoneId.systemDefault());
            BigDecimal close = TinkoffApiConnector.quotationToBigDecimal(candle.getClose());

            BaseBar bar = new BaseBar(barDuration, zdt.toInstant(),
                    DecimalNum.valueOf(TinkoffApiConnector.quotationToBigDecimal(candle.getOpen()).doubleValue()),
                    DecimalNum.valueOf(TinkoffApiConnector.quotationToBigDecimal(candle.getHigh()).doubleValue()),
                    DecimalNum.valueOf(TinkoffApiConnector.quotationToBigDecimal(candle.getLow()).doubleValue()),
                    DecimalNum.valueOf(close.doubleValue()),
                    DecimalNum.valueOf(BigDecimal.valueOf(candle.getVolume()).doubleValue()),
                    DecimalNum.valueOf(BigDecimal.valueOf(candle.getVolume()).doubleValue()),
                    0L);

            synchronized (barSeries) {
                if (barSeries.isEmpty() || zdt.toInstant().isAfter(barSeries.getLastBar().getEndTime())) {
                    barSeries.addBar(bar);
                } else if (zdt.toInstant().equals(barSeries.getLastBar().getEndTime())) {
                    barSeries.addBar(bar, true);
                }
            }

            signalTracker.updatePrice(instrument.identifier(), close);
            log(String.format("üìà [%s] –°–≤–µ—á–∞: %s | –ë–∞—Ä–æ–≤: %d", instrument.name(), close, barSeries.getBarCount()));
        } catch (Exception e) {
            logger.error(String.format("‚ùå [%s] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏", instrument.name()), e);
        }
    }

    private void runStrategyAnalysis() {
        if (barSeries.getBarCount() < strategyManager.getUnstablePeriod()) {
            logger.debug("[{}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {}/{}. –û–∂–∏–¥–∞–Ω–∏–µ...",
                    instrument.name(), barSeries.getBarCount(), strategyManager.getUnstablePeriod());
            return;
        }

        if (lastSignalTimestamp != null && Duration.between(lastSignalTimestamp, Instant.now()).getSeconds() < SIGNAL_COOLDOWN_SECONDS) {
            logger.debug("–§–∏–ª—å—Ç—Ä –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è [{}]: —Å–∏–≥–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.", instrument.name());
            return;
        }

        List<TradingSignal> signals = strategyManager.analyzeAll(instrument); // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        if (signals.isEmpty()) {
            return;
        }

        ru.tinkoff.piapi.core.models.Portfolio currentPortfolio = apiConnector.getPortfolio().join();

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        ru.tinkoff.piapi.core.models.Position currentPosition = currentPortfolio.getPositions().stream()
                .filter(p -> p.getFigi().equals(instrument.identifier()))
                .findFirst()
                .orElse(null);

        // –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤–∞–ª—é—Ç–∞–º
        Map<String, BigDecimal> availableBalances = new HashMap<>();
        if (currentPortfolio.getTotalAmountCurrencies() != null) {
            availableBalances.put(instrument.currency(), TinkoffApiConnector.moneyToBigDecimal(currentPortfolio.getTotalAmountCurrencies()));
        }

        for (TradingSignal signal : signals) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–¥–æ–±–æ—Ä" –ø–æ–∑–∏—Ü–∏–∏: –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            if (currentPosition != null && currentPosition.getQuantity().compareTo(BigDecimal.ZERO) != 0) {
                boolean isLongPosition = currentPosition.getQuantity().compareTo(BigDecimal.ZERO) > 0;
                boolean isBuySignal = signal.getSignalType() == TradingSignal.SignalType.BUY;

                if ((isLongPosition && isBuySignal) || (!isLongPosition && !isBuySignal)) {
                    logger.info("[{}] –°–∏–≥–Ω–∞–ª {} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.",
                            instrument.name(), signal.getSignalType());
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª
                }
            }

            RiskManager.ValidationResult validation = riskManager.validateSignal(
                    instrument, signal, currentPortfolio, availableBalances, currentPosition);
            if (validation.isValid()) {
                this.lastSignalTimestamp = Instant.now();
                signalTracker.trackSignal(signal);

                log("üéØ [" + instrument.name() + "] –°–∏–≥–Ω–∞–ª: " + signal.getDescription());
                log("‚úÖ [" + instrument.name() + "] " + validation.getMessage());

                signalsList.add(0, signal);
                executeTrade(signal, validation.getLots());
                break;
            } else {
                logger.warn("[{}] –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {}", instrument.name(), validation.getMessage());
            }
        }
    }

    private void executeTrade(TradingSignal signal, BigDecimal quantity) {
        if (quantity.compareTo(BigDecimal.ZERO) <= 0) {
            log(String.format("‚ùå [%s] –û–±—ä–µ–º –¥–ª—è —Å–¥–µ–ª–∫–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", instrument.name()));
            return;
        }

        backgroundExecutor.submit(() -> {
            try {
                OrderDirection direction = signal.getSignalType() == TradingSignal.SignalType.BUY
                        ? OrderDirection.ORDER_DIRECTION_BUY
                        : OrderDirection.ORDER_DIRECTION_SELL;

                log(String.format("üöÄ [%s] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–∏–∫–∞–∑–∞: %s, %d –ª–æ—Ç(–∞)...", instrument.name(), direction, quantity.longValue()));
                PostOrderResponse response = apiConnector.postMarketOrder(instrument.identifier(), quantity.longValue(), direction);
                log(String.format("‚úÖ [%s] –ü—Ä–∏–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! OrderID: %s", instrument.name(), response.getOrderId()));

                if (response.getExecutionReportStatus() == OrderExecutionReportStatus.EXECUTION_REPORT_STATUS_FILL) {
                    if (signal.getStopLoss() != null && signal.getStopLoss().compareTo(BigDecimal.ZERO) > 0) {
                        placeStopOrder(signal, quantity);
                    }
                } else {
                    log(String.format("‚ö†Ô∏è [%s] –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ. Stop-Loss –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.", instrument.name()));
                }
            } catch (Exception e) {
                handleCriticalError("–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–∫–∞–∑–∞", e);
            }
        });
    }

    private void placeStopOrder(TradingSignal signal, BigDecimal quantity) {
        try {
            StopOrderDirection stopDirection = (signal.getSignalType() == TradingSignal.SignalType.SELL)
                    ? StopOrderDirection.STOP_ORDER_DIRECTION_BUY
                    : StopOrderDirection.STOP_ORDER_DIRECTION_SELL;

            log(String.format("üõ°Ô∏è [%s] –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Stop-Loss: %s %d –ª–æ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ %s",
                    instrument.name(), stopDirection, quantity.longValue(), signal.getStopLoss().toPlainString()));

            String stopOrderId = apiConnector.postStopOrder(
                    instrument.identifier(),
                    quantity.longValue(),
                    TinkoffApiConnector.bigDecimalToQuotation(signal.getStopLoss()),
                    stopDirection,
                    StopOrderType.STOP_ORDER_TYPE_STOP_LOSS
            );
            log(String.format("‚úÖ [%s] Stop-Loss –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. OrderID: %s", instrument.name(), stopOrderId));
        } catch (Exception e) {
            handleCriticalError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å Stop-Loss –æ—Ä–¥–µ—Ä", e);
        }
    }

    private void addCandleToSeries(HistoricCandle candle, Duration barDuration) {
        ZonedDateTime zdt = ZonedDateTime.ofInstant(TinkoffApiConnector.timestampToInstant(candle.getTime()), ZoneId.systemDefault());
        synchronized (barSeries) {
            BaseBar bar = new BaseBar(barDuration, zdt.toInstant(),
                    DecimalNum.valueOf(TinkoffApiConnector.quotationToBigDecimal(candle.getOpen()).doubleValue()),
                    DecimalNum.valueOf(TinkoffApiConnector.quotationToBigDecimal(candle.getHigh()).doubleValue()),
                    DecimalNum.valueOf(TinkoffApiConnector.quotationToBigDecimal(candle.getLow()).doubleValue()),
                    DecimalNum.valueOf(TinkoffApiConnector.quotationToBigDecimal(candle.getClose()).doubleValue()),
                    DecimalNum.valueOf(BigDecimal.valueOf(candle.getVolume()).doubleValue()),
                    DecimalNum.valueOf(BigDecimal.valueOf(candle.getVolume()).doubleValue()), 0L);

            if (barSeries.isEmpty() || zdt.toInstant().isAfter(barSeries.getLastBar().getEndTime())) {
                barSeries.addBar(bar);
            } else if (zdt.toInstant().equals(barSeries.getLastBar().getEndTime())) {
                barSeries.addBar(bar, true);
            }
        }
    }

    private void log(String message) {
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UI –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ JavaFX
        javafx.application.Platform.runLater(() -> loggerCallback.accept(message));
        logger.info(message); // –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª/–∫–æ–Ω—Å–æ–ª—å
    }

    private void handleCriticalError(String message, Throwable e) {
        String errorMessage = String.format("üí• [%s] –û—à–∏–±–∫–∞: %s. –°–º. –ª–æ–≥–∏.", instrument.name(), message);
        logger.error(errorMessage, e);
        javafx.application.Platform.runLater(() -> loggerCallback.accept(errorMessage));
    }
}
